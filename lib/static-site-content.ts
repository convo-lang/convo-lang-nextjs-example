
export const staticContent={
    "readMe": "# Convo-Lang\nA Conversational Language\n\n![convo](https://raw.githubusercontent.com/convo-lang/convo-lang/refs/heads/main/assets/learn-convo-demo.webp)\n\nYou can check out an interactive demo of Convo-Lang here - [https://learn.convo-lang.ai/playground](https://learn.convo-lang.ai/playground)\n\nIf you want to learn the Convo-Lang language check out this tutorial  - [https://learn.convo-lang.ai/learn](https://learn.convo-lang.ai/learn)\n\nCheckout the source code on GitHub -[ https://github.com/convo-lang/convo-lang](https://github.com/convo-lang/convo-lang)\n\n\n## What is Convo-Lang?\nConvo-Lang is a programming language built from the ground up for prompt engineers and AI application\ndevelopers. The goal of Convo-Lang is to simplify to development of LLM based applications and \nprovided a uniform syntax for working with all LLMs.\n\nConvo-Lang is a mixture between a procedural programming language, prompting template system and \nconversation state management system. You can execute convo-lang in Javascript, Python,\nfrom the command line or directly in VSCode.\n\nConvo-Lang aims to provided a uniform prompting syntax that is LLM agnostic and allows you to\nstore both prompts, metadata and tradition programming logic in a single file or template string.\n\nThe convo-lang syntax supports advanced features such as function calling, tool usage and vision.\nThe Convo-Lang ecosystem consists of a parser, interpreter, Typescript/Javascript/Python libraries,\na CLI, and a vscode extension for syntax highlighting and in-editor script execution.\n\n\n## Packages\n- @convo-lang/convo-lang - Contains the Convo-Lang Conversation Engine, and a Typescript/Javascript library to use Convo-Lang in your application.\n- @convo-lang/convo-lang-react - Contains UI pre-built UI components including a fully functional chat component.\n- @convo-lang/convo-lang-openai - Conversation adapter for OpenAI.\n- @convo-lang/convo-lang-api-routes - A backend for relaying messages between the browser and LLM backends such as OpenAI.\n- @convo-lang/convo-vfs - Used to integrate Convo-Lang into virtual file systems.\n- @convo-lang/convo-lang-cli - A CLI interface that allows you to execute and parse convo-lang files.\n- @convo-lang/convo-lang-tools - Contains the convo-lang vscode extension, which includes syntax highlighting,\n  in-editor script execution, script parsing, and other helpful tools for working with convo-lang.\n  In most cases, you will not install this package but instead install the vscode convo-lang extension.\n\n\n## Installation\nFor use in an application install the @convo-lang/convo-lang package\n``` sh\nnpm i @convo-lang/convo-lang\n```\n\nFor use on the command line install the @convo-lang/convo-lang-cli package\n``` sh\nnpm i @convo-lang/convo-lang-cli -g\n```\n\n\n## VSCode extension\nYou will also probably want to install the vscode extension for syntax highlighting and other\ndeveloper niceties. You can install the vscode extension by searching for \"convo-lang\" in the\nvscode extension tab.\n\nhttps://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools \n\n## Using convo-lang in a NextJs project\n\nInstall packages:\n``` sh\nnpm i \\\n    @convo-lang/convo-lang \\\n    @convo-lang/convo-lang-react \\\n    @convo-lang/convo-lang-openai \\\n    @convo-lang/convo-lang-api-routes \\\n    @iyio/nextjs-common \\\n    @iyio/react-common \\\n    @iyio/node-common\n```\n\nAdd API endpoint to `/pages/api/convo-lang/[convo-api-action].ts`. This API endpoint will be used\nto relay messages between LLMs while keep your API secrets safe.\n``` ts\nimport { createRequestHandler } from \"@/lib/api-handler\";\nimport { createConvoLangApiRoutes } from \"@convo-lang/convo-lang-api-routes\";\nimport { initOpenAiBackend } from '@convo-lang/convo-lang-openai';\n\ninitOpenAiBackend();\n\nconst routes=createConvoLangApiRoutes({prefix:'/api/convo-lang/'});\n\nconst handler=createRequestHandler({routes});\n\nexport default handler;\n\n```\n\nThe code below create a fully functional chat interface with a website assistant agent\n``` tsx\nimport { ConversationView } from \"@convo-lang/convo-lang-react\";\nimport { NextJsBaseLayoutView } from \"@iyio/nextjs-common\";\n\n// For syntax highlighting of Convo-Lang install the Convo-Lang VSCode extension.\n// Search for \"convo-lang\" in the extensions window.\nconst exampleConvo=/*convo*/`\n\n> define\nagentName='Doc'\n\n> system\nYour name is {{agentName}} and you're helping a user navigate a website\n\nPages:\n- Dashboard: path = /\n- Contact: path = /contact\n- News: path = /news\n- Profile: path = /users-place\n- Projects: path = /project-jobs\n\n> extern openPage(\n    # Path of page to open\n    path:string\n)\n\n> assistant\nHi 👋, I'm {{agentName}}. I'm here to help you navigate this awesome website\n\n`\n\n\nexport function AgentView(){\n\n    return (\n        <NextJsBaseLayoutView>\n            <ConversationView\n                theme=\"dark\"\n                showInputWithSource\n                enabledSlashCommands\n                template={exampleConvo}\n                httpEndpoint=\"/api/convo-lang\"\n                externFunctions={{\n                    openPage:async (path:string)=>{\n                        window.history.pushState(null,'',path);\n                    },\n                }}\n            />\n        </NextJsBaseLayoutView>\n    )\n\n}\n\n```\n\n## NextJs example project\nThe Convo-Lang repo contains a NextJs project pre-configure with Convo-Lang with a retro web page \nbuilder agent\n\nhttps://github.com/convo-lang/convo-lang/tree/main/examples/convo-nextjs-example\n\n![Yahoo 500](https://github.com/convo-lang/convo-lang/blob/main/assets/yahoo-500.png?raw=true)\n\n\n## Using Convo-Lang in without a UI framework\nWhen using convo-lang in a javascript application, you will primarily interact with Conversation objects.\nConversation objects store the messages of a convo script and allow new messages to be appended\nand LLMs to respond to messages from the user.\n\n``` js\nimport { Conversation } from '@convo-lang/convo-lang';\nimport { initRootScope, EnvParams } from '@iyio/common';\nimport { openaiConvoModule } from '@convo-lang/convo-lang-openai';\n\n// initRootScope is used to configure services and configuration variables\ninitRootScope(reg=>{\n\n    // register OpenAI configuration variables. These variates could also be stored as environment\n    // variables and loaded using reg.addParams(new EnvParams()).\n    reg.addParams({\n        \"openAiApiKey\":\"YOUR_OPEN_AI_KEY\",\n        \"openAiChatModel\":\"gpt-4-1106-preview\",\n        \"openAiVisionModel\":\"gpt-4-vision-preview\",\n        \"openAiAudioModel\":\"whisper-1\",\n        \"openAiImageModel\":\"dall-e-3\"\n    })\n\n    // EnvParams can optionally be used to load configuration variables from process.env\n    reg.addParams(new EnvParams());\n\n    // Converts and relays message to OpenAI\n    reg.use(openaiConvoModule);\n\n    // aiCompleteLambdaModule can be used to relay messages to a lambda function for use in the browser\n    //reg.use(aiCompleteLambdaModule);\n})\n\nconst main=async ()=>{\n    const convo=new Conversation();\n\n    // adding /*convo*/ before a template literal will give you convo syntax highlighting when you have\n    // the convo-lang vscode extension installed.\n\n    convo.append(/*convo*/`\n        > system\n        You are a friendly and very skilled fisherman. Taking a group of tourist on a fishing expedition\n        off the coast of Maine.\n\n        > user\n        What kind of clothes should I wear?\n    `);\n\n    // Calling completeAsync will answer the user's question using the configured LLM\n    await convo.completeAsync();\n\n\n    // The convo property of the Conversation object will be updated with the answer from the LLM\n    console.log(convo.convo)\n\n    // You can get a flatted view of the conversation by calling flattenAsync. The flatted version\n    // of the conversation contains messages with all templates populated and is suitable to be \n    // used to render a view of the conversation to the user.\n    const flat=await convo.flattenAsync();\n    console.log('flat',flat.messages);\n}\n\nmain();\n\n```\n\n## Using the convo-lang extension\nWith the convo vscode extension installed, you can execute convo scripts directly in vscode. Just\npress **(CMD+R)** to run a script.\n\nYou can also run snippets of convo scripts that are embedded in other\ndocument types. Just highlight the convo code you want to run, open the command palette, and\nsearch for \"Complete Convo Conversation\" and press enter. Then the snippet will be opened in a new\nconvo file and completed. This is great for quick prototyping and testing prompts in your application\nwithout having to start your full application.\n\n## Using the CLI\nThe convo CLI can be used to execute convo scripts from the command line\n\n``` sh\n# install the convo cli\nnpm install -g @iyio/convo-cli\n\n# Results will be printed to stdout\nconvo talky-time.convo\n\n# Results will be written to a new file named something-happened.convo\nconvo talky-time.convo --out something.convo\n\n# Result will be written to the source input file. This allows you to have a continuous conversation\nconvo talky-time.convo --out .\n```\n\nThere is currently only one way to configure the convo cli and vscode extension. This will be extended\nsoon to include reading configuration files from your current workspace. \n\n\n## CLI and extension configuration\nTo allow convo to access OpenAI, create a JSON file called ~/.config/convo/convo.json and add the\nfollowing contents. Remember to replace the API key with your OpenAI api key.\n\n``` json\n{\n    \"env\":{\n        \"openAiApiKey\":\"YOUR_OPEN_AI_KEY\",\n        \"openAiChatModel\":\"gpt-4o\",\n        \"openAiVisionModel\":\"gpt-4o\",\n        \"openAiAudioModel\":\"whisper-1\",\n        \"openAiImageModel\":\"dall-e-3\"\n    }\n}\n```\n\n## Learn More\nYou can check out an interactive demo of Convo-Lang here - [https://learn.convo-lang.ai/playground](https://learn.convo-lang.ai/playground)\n\nIf you want to learn the Convo-Lang language check out this tutorial  - [https://learn.convo-lang.ai/learn](https://learn.convo-lang.ai/learn)\n\n## Contact\n\nEmail - doc@convo-lang.ai\n\nX - https://x.com/ConvoLang\n\nJoin our Discord Server - https://discord.gg/GyXp8Dsa\n",
    "readMeHtml": "<h1>Convo-Lang</h1>\n<p>A Conversational Language</p>\n<p><img src=\"https://raw.githubusercontent.com/convo-lang/convo-lang/refs/heads/main/assets/learn-convo-demo.webp\" alt=\"convo\"></p>\n<p>You can check out an interactive demo of Convo-Lang here - <a href=\"https://learn.convo-lang.ai/playground\">https://learn.convo-lang.ai/playground</a></p>\n<p>If you want to learn the Convo-Lang language check out this tutorial  - <a href=\"https://learn.convo-lang.ai/learn\">https://learn.convo-lang.ai/learn</a></p>\n<p>Checkout the source code on GitHub -<a href=\"https://github.com/convo-lang/convo-lang\"> https://github.com/convo-lang/convo-lang</a></p>\n<h2>What is Convo-Lang?</h2>\n<p>Convo-Lang is a programming language built from the ground up for prompt engineers and AI application\ndevelopers. The goal of Convo-Lang is to simplify to development of LLM based applications and\nprovided a uniform syntax for working with all LLMs.</p>\n<p>Convo-Lang is a mixture between a procedural programming language, prompting template system and\nconversation state management system. You can execute convo-lang in Javascript, Python,\nfrom the command line or directly in VSCode.</p>\n<p>Convo-Lang aims to provided a uniform prompting syntax that is LLM agnostic and allows you to\nstore both prompts, metadata and tradition programming logic in a single file or template string.</p>\n<p>The convo-lang syntax supports advanced features such as function calling, tool usage and vision.\nThe Convo-Lang ecosystem consists of a parser, interpreter, Typescript/Javascript/Python libraries,\na CLI, and a vscode extension for syntax highlighting and in-editor script execution.</p>\n<h2>Packages</h2>\n<ul>\n<li>@convo-lang/convo-lang - Contains the Convo-Lang Conversation Engine, and a Typescript/Javascript library to use Convo-Lang in your application.</li>\n<li>@convo-lang/convo-lang-react - Contains UI pre-built UI components including a fully functional chat component.</li>\n<li>@convo-lang/convo-lang-openai - Conversation adapter for OpenAI.</li>\n<li>@convo-lang/convo-lang-api-routes - A backend for relaying messages between the browser and LLM backends such as OpenAI.</li>\n<li>@convo-lang/convo-vfs - Used to integrate Convo-Lang into virtual file systems.</li>\n<li>@convo-lang/convo-lang-cli - A CLI interface that allows you to execute and parse convo-lang files.</li>\n<li>@convo-lang/convo-lang-tools - Contains the convo-lang vscode extension, which includes syntax highlighting,\nin-editor script execution, script parsing, and other helpful tools for working with convo-lang.\nIn most cases, you will not install this package but instead install the vscode convo-lang extension.</li>\n</ul>\n<h2>Installation</h2>\n<p>For use in an application install the @convo-lang/convo-lang package</p>\n<pre><code class=\"language-sh\">npm i @convo-lang/convo-lang\n</code></pre>\n<p>For use on the command line install the @convo-lang/convo-lang-cli package</p>\n<pre><code class=\"language-sh\">npm i @convo-lang/convo-lang-cli -g\n</code></pre>\n<h2>VSCode extension</h2>\n<p>You will also probably want to install the vscode extension for syntax highlighting and other\ndeveloper niceties. You can install the vscode extension by searching for &quot;convo-lang&quot; in the\nvscode extension tab.</p>\n<p>https://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools</p>\n<h2>Using convo-lang in a NextJs project</h2>\n<p>Install packages:</p>\n<pre><code class=\"language-sh\">npm i \\\n    @convo-lang/convo-lang \\\n    @convo-lang/convo-lang-react \\\n    @convo-lang/convo-lang-openai \\\n    @convo-lang/convo-lang-api-routes \\\n    @iyio/nextjs-common \\\n    @iyio/react-common \\\n    @iyio/node-common\n</code></pre>\n<p>Add API endpoint to <code>/pages/api/convo-lang/[convo-api-action].ts</code>. This API endpoint will be used\nto relay messages between LLMs while keep your API secrets safe.</p>\n<pre><code class=\"language-ts\">import { createRequestHandler } from &quot;@/lib/api-handler&quot;;\nimport { createConvoLangApiRoutes } from &quot;@convo-lang/convo-lang-api-routes&quot;;\nimport { initOpenAiBackend } from '@convo-lang/convo-lang-openai';\n\ninitOpenAiBackend();\n\nconst routes=createConvoLangApiRoutes({prefix:'/api/convo-lang/'});\n\nconst handler=createRequestHandler({routes});\n\nexport default handler;\n\n</code></pre>\n<p>The code below create a fully functional chat interface with a website assistant agent</p>\n<pre><code class=\"language-tsx\">import { ConversationView } from &quot;@convo-lang/convo-lang-react&quot;;\nimport { NextJsBaseLayoutView } from &quot;@iyio/nextjs-common&quot;;\n\n// For syntax highlighting of Convo-Lang install the Convo-Lang VSCode extension.\n// Search for &quot;convo-lang&quot; in the extensions window.\nconst exampleConvo=/*convo*/`\n\n&gt; define\nagentName='Doc'\n\n&gt; system\nYour name is {{agentName}} and you're helping a user navigate a website\n\nPages:\n- Dashboard: path = /\n- Contact: path = /contact\n- News: path = /news\n- Profile: path = /users-place\n- Projects: path = /project-jobs\n\n&gt; extern openPage(\n    # Path of page to open\n    path:string\n)\n\n&gt; assistant\nHi 👋, I'm {{agentName}}. I'm here to help you navigate this awesome website\n\n`\n\n\nexport function AgentView(){\n\n    return (\n        &lt;NextJsBaseLayoutView&gt;\n            &lt;ConversationView\n                theme=&quot;dark&quot;\n                showInputWithSource\n                enabledSlashCommands\n                template={exampleConvo}\n                httpEndpoint=&quot;/api/convo-lang&quot;\n                externFunctions={{\n                    openPage:async (path:string)=&gt;{\n                        window.history.pushState(null,'',path);\n                    },\n                }}\n            /&gt;\n        &lt;/NextJsBaseLayoutView&gt;\n    )\n\n}\n\n</code></pre>\n<h2>NextJs example project</h2>\n<p>The Convo-Lang repo contains a NextJs project pre-configure with Convo-Lang with a retro web page\nbuilder agent</p>\n<p>https://github.com/convo-lang/convo-lang/tree/main/examples/convo-nextjs-example</p>\n<p><img src=\"https://github.com/convo-lang/convo-lang/blob/main/assets/yahoo-500.png?raw=true\" alt=\"Yahoo 500\"></p>\n<h2>Using Convo-Lang in without a UI framework</h2>\n<p>When using convo-lang in a javascript application, you will primarily interact with Conversation objects.\nConversation objects store the messages of a convo script and allow new messages to be appended\nand LLMs to respond to messages from the user.</p>\n<pre><code class=\"language-js\">import { Conversation } from '@convo-lang/convo-lang';\nimport { initRootScope, EnvParams } from '@iyio/common';\nimport { openaiConvoModule } from '@convo-lang/convo-lang-openai';\n\n// initRootScope is used to configure services and configuration variables\ninitRootScope(reg=&gt;{\n\n    // register OpenAI configuration variables. These variates could also be stored as environment\n    // variables and loaded using reg.addParams(new EnvParams()).\n    reg.addParams({\n        &quot;openAiApiKey&quot;:&quot;YOUR_OPEN_AI_KEY&quot;,\n        &quot;openAiChatModel&quot;:&quot;gpt-4-1106-preview&quot;,\n        &quot;openAiVisionModel&quot;:&quot;gpt-4-vision-preview&quot;,\n        &quot;openAiAudioModel&quot;:&quot;whisper-1&quot;,\n        &quot;openAiImageModel&quot;:&quot;dall-e-3&quot;\n    })\n\n    // EnvParams can optionally be used to load configuration variables from process.env\n    reg.addParams(new EnvParams());\n\n    // Converts and relays message to OpenAI\n    reg.use(openaiConvoModule);\n\n    // aiCompleteLambdaModule can be used to relay messages to a lambda function for use in the browser\n    //reg.use(aiCompleteLambdaModule);\n})\n\nconst main=async ()=&gt;{\n    const convo=new Conversation();\n\n    // adding /*convo*/ before a template literal will give you convo syntax highlighting when you have\n    // the convo-lang vscode extension installed.\n\n    convo.append(/*convo*/`\n        &gt; system\n        You are a friendly and very skilled fisherman. Taking a group of tourist on a fishing expedition\n        off the coast of Maine.\n\n        &gt; user\n        What kind of clothes should I wear?\n    `);\n\n    // Calling completeAsync will answer the user's question using the configured LLM\n    await convo.completeAsync();\n\n\n    // The convo property of the Conversation object will be updated with the answer from the LLM\n    console.log(convo.convo)\n\n    // You can get a flatted view of the conversation by calling flattenAsync. The flatted version\n    // of the conversation contains messages with all templates populated and is suitable to be \n    // used to render a view of the conversation to the user.\n    const flat=await convo.flattenAsync();\n    console.log('flat',flat.messages);\n}\n\nmain();\n\n</code></pre>\n<h2>Using the convo-lang extension</h2>\n<p>With the convo vscode extension installed, you can execute convo scripts directly in vscode. Just\npress <strong>(CMD+R)</strong> to run a script.</p>\n<p>You can also run snippets of convo scripts that are embedded in other\ndocument types. Just highlight the convo code you want to run, open the command palette, and\nsearch for &quot;Complete Convo Conversation&quot; and press enter. Then the snippet will be opened in a new\nconvo file and completed. This is great for quick prototyping and testing prompts in your application\nwithout having to start your full application.</p>\n<h2>Using the CLI</h2>\n<p>The convo CLI can be used to execute convo scripts from the command line</p>\n<pre><code class=\"language-sh\"># install the convo cli\nnpm install -g @iyio/convo-cli\n\n# Results will be printed to stdout\nconvo talky-time.convo\n\n# Results will be written to a new file named something-happened.convo\nconvo talky-time.convo --out something.convo\n\n# Result will be written to the source input file. This allows you to have a continuous conversation\nconvo talky-time.convo --out .\n</code></pre>\n<p>There is currently only one way to configure the convo cli and vscode extension. This will be extended\nsoon to include reading configuration files from your current workspace.</p>\n<h2>CLI and extension configuration</h2>\n<p>To allow convo to access OpenAI, create a JSON file called ~/.config/convo/convo.json and add the\nfollowing contents. Remember to replace the API key with your OpenAI api key.</p>\n<pre><code class=\"language-json\">{\n    &quot;env&quot;:{\n        &quot;openAiApiKey&quot;:&quot;YOUR_OPEN_AI_KEY&quot;,\n        &quot;openAiChatModel&quot;:&quot;gpt-4o&quot;,\n        &quot;openAiVisionModel&quot;:&quot;gpt-4o&quot;,\n        &quot;openAiAudioModel&quot;:&quot;whisper-1&quot;,\n        &quot;openAiImageModel&quot;:&quot;dall-e-3&quot;\n    }\n}\n</code></pre>\n<h2>Learn More</h2>\n<p>You can check out an interactive demo of Convo-Lang here - <a href=\"https://learn.convo-lang.ai/playground\">https://learn.convo-lang.ai/playground</a></p>\n<p>If you want to learn the Convo-Lang language check out this tutorial  - <a href=\"https://learn.convo-lang.ai/learn\">https://learn.convo-lang.ai/learn</a></p>\n<h2>Contact</h2>\n<p>Email - doc@convo-lang.ai</p>\n<p>X - https://x.com/ConvoLang</p>\n<p>Join our Discord Server - https://discord.gg/GyXp8Dsa</p>\n",
    "examples": [
        {
            "name": "buildVehicle.convo",
            "convo": "# Builds a vehicle for the user\n> buildVehicle(\n\n    # A short description of the vehicle\n    description:string;\n\n    # The color of the vehicle. Pick a color you think is fitting\n    color?:string\n\n    # The type of the vehicle\n    type:enum('car' 'truck' 'van' 'boat')\n\n    # The top speed of the vehicle in miles per hour\n    topSpeed:number\n\n    # The max payload capcapty the vehicle can cary in pounds. This is only required for vehicles that will tow large amounts of weight.\n    payloadCapacity?:number;\n) -> (\n\n    return({\n        isTruck:eq(type,'truck')\n        isFast:gte(topSpeed,150)\n    })\n)\n\n> system\nYou are funny mechanical engineer helping a customer build a vehicle.\n\n> user\nI need a car that can do the quarter mile in 7 seconds or less\n"
        },
        {
            "name": "categorize-message.convo",
            "convo": "> system\nYou are helping a user categorize messages in the the following categories:\n- statement\n- question\n- instructions\n- other\n\nOnly responde with one or more of the categories above. Seperate categories with a comma. Do not include any other information.\n\n> user\nCategorize message below.\n\n> user\nThe conditions have been set. Now, based on this, we need to consider the following for maximizing yield:\n\n1. Soil preparation and fertility enhancement\n2. Choice of seed variety adapted to local conditions\n3. Planting times and density\n4. Water management and irrigation\n5. Pest and disease control\n6. Weed management\n\nWe can start by discussing soil preparation and fertility. Have you done a soil test recently?\n\n\n> assistant\ninstructions, question\n\n\n> user\nApples products are over priced\n\n> assistant\nstatement\n\n\n> user\nFigjam big bam who ha\n\n> assistant\nother\n\n\n> user\n"
        },
        {
            "name": "conditional.convo",
            "convo": "> define\nname = 'bob'\n\nHobbie = struct(\n    name:string\n    yearlyBudgetUsd:number\n)\n\n@condition name joe\n> system\nYou're a friendly assistant named joe and you like long walks on the beach \n\n@condition name bob\n> system\nYou're a firendly construction site assistant and you like building stuff\n\n\n@json Hobbie[]\n> user\nWhat are your hobbies\n\n\n@format json\n> assistant\n[\n    {\n        \"name\": \"DIY woodworking projects\",\n        \"yearlyBudgetUsd\": 500\n    },\n    {\n        \"name\": \"Collecting vintage construction tools\",\n        \"yearlyBudgetUsd\": 300\n    },\n    {\n        \"name\": \"Miniature model building\",\n        \"yearlyBudgetUsd\": 200\n    }\n]\n\n\n> user\n"
        },
        {
            "name": "function-chaining-complete.convo",
            "convo": "> system\nYou are a friendly personal assistant. You are helping a user with a very busy schedule so please\nkeep your responses short and straight to the point.\n\n> define\n\n# Gets the current weather conditions for the given location. Returned values use the metric system.\n> getWeather(\n    # The location to get weather conditions for\n    location:string\n) -> (\n\n    weather=httpGet('https://6tnpcnzjbtwa5z4qorusxrfaqu0sqqhs.lambda-url.us-east-1.on.aws/',location)\n\n    return(weather)\n)\n\n# Gets the users current location\n> getLocation() -> (\n    return({location:'Cincinnati'})\n)\n\n# Sets the state of the users\n> setHouseState(\n    windows?:enum(\"open\" \"closed\")\n    lights?:enum(\"on\" \"off\")\n) -> (\n    return({updated:true})\n)\n\n> user\nCan you get the house ready for the day based on todays weather\n\n\n@tokenUsage 161 / 9 / $0.0018800000000000002\n@toolId call_L87T2cY57lD1RD44hsUrDDC9\n> call getLocation()\n> result\n__return={\n    \"location\": \"Cincinnati\"\n}\n\n\n@tokenUsage 183 / 15 / $0.0022800000000000003\n@toolId call_tzErx0aD5Jy8Adk6fV0iowyJ\n> call getWeather(\n    \"location\": \"Cincinnati\"\n)\n> result\n__return={\n    \"data\": {\n        \"time\": \"2023-12-18T14:05:00Z\",\n        \"values\": {\n            \"cloudBase\": 0.35,\n            \"cloudCeiling\": 0.35,\n            \"cloudCover\": 100,\n            \"dewPoint\": -0.63,\n            \"freezingRainIntensity\": 0,\n            \"humidity\": 81,\n            \"precipitationProbability\": 0,\n            \"pressureSurfaceLevel\": 988.41,\n            \"rainIntensity\": 0,\n            \"sleetIntensity\": 0,\n            \"snowIntensity\": 0,\n            \"temperature\": 2.31,\n            \"temperatureApparent\": -2.21,\n            \"uvHealthConcern\": 0,\n            \"uvIndex\": 0,\n            \"visibility\": 16,\n            \"weatherCode\": 1001,\n            \"windDirection\": 287,\n            \"windGust\": 11.81,\n            \"windSpeed\": 5.31\n        }\n    },\n    \"location\": {\n        \"lat\": 39.1014518737793,\n        \"lon\": -84.51245880126953,\n        \"name\": \"Cincinnati, Hamilton County, Ohio, United States\",\n        \"type\": \"administrative\"\n    }\n}\n\n\n@tokenUsage 393 / 19 / $0.0045000000000000005\n@toolId call_XmTbxCKagHj0sYn8O2NGgPsl\n> call setHouseState(\n    \"windows\": \"closed\",\n    \"lights\": \"on\"\n)\n> result\n__return={\n    \"updated\": true\n}\n\n\n@tokenUsage 426 / 25 / $0.0050100000000000006\n> assistant\nThe house is ready for the day. Windows are closed and lights are on because it's overcast and chilly outside.\n\n\n> user\n"
        },
        {
            "name": "function-chaining.convo",
            "convo": "> system\nYou are a friendly personal assistant. You are helping a user with a very busy schedule so please\nkeep your responses short and straight to the point.\n\n> define\n\n# Gets the current weather conditions for the given location. Returned values use the metric system.\n> getWeather(\n    # The location to get weather conditions for\n    location:string\n) -> (\n\n    weather=httpGet('https://6tnpcnzjbtwa5z4qorusxrfaqu0sqqhs.lambda-url.us-east-1.on.aws/',location)\n\n    return(weather)\n)\n\n# Gets the users current location\n> getLocation() -> (\n    return({location:'Cincinnati'})\n)\n\n# Sets the state of the users\n> setHouseState(\n    windows?:enum(\"open\" \"closed\")\n    lights?:enum(\"on\" \"off\")\n) -> (\n    return({updated:true})\n)\n\n> user\nCan you get the house ready for the day based on todays weather\n"
        },
        {
            "name": "get-weather-lambda.convo",
            "convo": "> system\nYou are a friendly weather man that also like to give suggestions about activities to do in the\nlocations where you are giving weather information about.\n\n# Gets the current weather conditions for the given location. Returned values use the metric system.\n> getWeather(\n    # The location to get weather conditions for\n    location:string\n) -> (\n\n    weather=httpGet('https://6tnpcnzjbtwa5z4qorusxrfaqu0sqqhs.lambda-url.us-east-1.on.aws/',location)\n\n    return(weather)\n)\n\n> assistant\nHello, ask me about the weather anywhere in the world 🌍\n\n"
        },
        {
            "name": "image-description.convo",
            "convo": "@enableVision\n> user\nDescribe this image\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n"
        },
        {
            "name": "image-joke-completed.convo",
            "convo": "@enableVision\n> user\nTell me a joke about this image\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n@toolId call_Q8foCtL5TvFqm9ybmnA9cksb\n> call queryImage(\n    \"query\": \"joke\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\"result\":\"This is an iconic image of four men crossing the street on a pedestrian crossing. It's known for being the cover of a famous album by a well-known British band from the 1960s. They are depicted in mid-stride, and the scene is set against a backdrop of a city road flanked by trees and cars. The composition of this photo has been widely recognized and parodied countless times.\"}\n\n\n> assistant\nWhy did the Beatles cross the road in that iconic album cover? To 'Abbey' honest, they were just trying to get to the other 'sideshow'! 🎵🚶‍♂️🚶‍♂️🚶‍♂️🚶‍♂️\n\n\n> user\nIs anybody in the picture waring a white suite?\n\n@toolId call_qdZxE5UsBqIA744DgnUFdYLB\n> call queryImage(\n    \"query\": \"Is anyone in the picture wearing a white suit?\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\"result\":\"Yes, the person on the right side of the image is wearing a white suit.\"}\n\n\n> assistant\nYes, in the image, the person on the right side is wearing a white suit.\n\n\n> user\n"
        },
        {
            "name": "image-joke-gpt-3.5.convo",
            "convo": "@enableVision\n> define\n__trackTime=true\n__trackTokenUsage=true\n__trackModel=true\n\n@responseModel gpt-3.5-turbo-1106\n> user\nTell me a joke about this image\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n"
        },
        {
            "name": "image-joke.convo",
            "convo": "@enableVision\n> user\nTell me a joke about this image\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n@toolId call_1Qdz3N5FMa2FTRYXaG94f6bj\n> call queryImage(\n    \"query\": \"Tell me a joke about this image\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\"result\":\"Why did the Beatles cross the road? Because they knew it was the only way to get to the other side of their Abbey Road album!\"}\n\n\n> assistant\nWhy did the Beatles cross the road? Because they knew it was the only way to get to the other side\nof their Abbey Road album!\n\n\n> user\nWho is the person wearing the white suite?\n\n@toolId call_Ld39lvjGHRSQjkTraJIt5ZZf\n> call queryImage(\n    \"query\": \"Identify the person wearing the white suit\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\"result\":\"I can't identify the person in the image, but I can tell you that the individual wearing the white suit is crossing a zebra crossing and is part of a group of four people who are all walking in line on the crosswalk.\"}\n\n\n> assistant\nI can't identify the person in the image, but I can tell you that the individual wearing the white\nsuit is part of a group of four people who are all walking in line on a zebra crossing. If this\nimage is related to the iconic Abbey Road album by the Beatles, then the person in the white suit\nwould be John Lennon.\n\n\n> user\n"
        },
        {
            "name": "image-similarities.convo",
            "convo": "@enableVision\n> user\nDescribe any similarities in these images\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/tower.jpg)\n"
        },
        {
            "name": "image-wedding-outfit.convo",
            "convo": "@enableVision\n> system\nYou are a friendly and very friendly tour guide.\n\n> user\nWhat would be a good outfit to wear to a wedding. I like the color white a lot.\n\n> assistant\nAh, the classic wedding attire conundrum! While I'd love to deck you out in your favorite hue from head to toe, we've got to remember one cardinal rule of wedding fashion: white is traditionally reserved for the bride on her special day. I wouldn't want you mistaken for the main event!\n\nIf you're keen on incorporating your beloved white, we can aim for a subtle nod to your favorite shade, without upstaging the bride. How about we think of outfits that cleverly use white as an accent color, or go for a soft pastel ensemble with a hint of white? Cream or beige can also be a safe bet if they complement your skin tone nicely.\n\nIf you're thinking of a suit, perhaps a nice light grey or a soft blue with a white shirt, paired with a natty tie or a pocket square that has just a smidge of white to whisper rather than shout your preference. For a dress or a skirt, think floral patterns with white elements or a gentle mix of other wedding-appropriate colors.\n\nRemember, the key is subtlety! Want to really nail the look? How about sharing a picture of some outfits, and I can give you a virtual thumbs up or suggest a few tweaks to keep you looking sharp and respectful of the wedding's unspoken fashion rules?\n\n\n> user\nWhich outfit in this picture would match the best\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n"
        },
        {
            "name": "joke-lm-studio.convo",
            "convo": "> define\n// Sets the default completion to http://localhost:1234/v1 which points to LM Studio on your machine - https://lmstudio.ai/\n__endpoint='http://localhost:1234/v1'\n\n> user\nTell me a joke\n"
        },
        {
            "name": "joke.convo",
            "convo": "> define\n__trackTime=true\n__trackTokenUsage=true\n__trackModel=true\n\n> user\nTell me a joke about airplanes\n"
        },
        {
            "name": "json-image-scheme-2.convo",
            "convo": "@enableVision\n> define\nPerson = struct(\n\n    pantsColor:string\n\n    pantsType:enum(\"dress\" \"jeans\" \"casual\")\n\n    shirtColor:string\n\n    shirtType:enum(\"jacket\" \"t-shirt\" \"other\")\n)\n\n@json Person[]\n@assign dudes\n> user\nDescribe each person in this picture.\n\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n\n@tokenUsage 265 / 68 / $0.00469\n@toolId call_Ti6FQ2MnHkDHX9TzIwyvNHsB\n> call queryImage(\n    \"query\": \"Describe the clothing, specifically the pants and shirt, for each person in this picture, including the colors and types of these items.\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\n    \"result\": \"In the image, you see four individuals crossing the road in single file. From left to right:\\n\\n- The first person is wearing a blue denim jacket with blue jeans, creating a denim-on-denim look, which is commonly referred to as a \\\"Canadian tuxedo.\\\"\\n- The second person is dressed in a dark suit with a white shirt, and he does not appear to be wearing a tie. His pants are black and match the suit jacket.\\n- The third individual is also in a suit, but his is a dark, possibly black or charcoal, pinstripe pattern. He is paired with a black or dark shirt, and his pants match his suit jacket.\\n- The fourth person is wearing a white suit with a light-colored shirt beneath. His pants are white, consistent with his suit jacket.\"\n}\n\n\n@tokenUsage 506 / 160 / $0.00986\n@format json\n@assignTo dudes\n> assistant\n[\n    {\n        \"pantsColor\": \"blue\",\n        \"pantsType\": \"jeans\",\n        \"shirtColor\": \"blue\",\n        \"shirtType\": \"jacket\"\n    },\n    {\n        \"pantsColor\": \"black\",\n        \"pantsType\": \"casual\",\n        \"shirtColor\": \"white\",\n        \"shirtType\": \"other\"\n    },\n    {\n        \"pantsColor\": \"dark\",\n        \"pantsType\": \"casual\",\n        \"shirtColor\": \"dark\",\n        \"shirtType\": \"other\"\n    },\n    {\n        \"pantsColor\": \"white\",\n        \"pantsType\": \"casual\",\n        \"shirtColor\": \"light-colored\",\n        \"shirtType\": \"other\"\n    }\n]\n\n\n> user\n"
        },
        {
            "name": "json-image-scheme.convo",
            "convo": "@enableVision\n> define\nPerson = struct(\n    name?:string\n    description?:string\n)\n\n@json Person[]\n@assign dudes\n> user\nDescribe each person in this picture.\n\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n\n@tokenUsage 213 / 49 / $0.0036000000000000003\n@toolId call_dfpKG4bnDRA3UTBjspQr2O4s\n> call queryImage(\n    \"query\": \"describe each person in this picture\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\n    \"result\": \"The image shows four individuals crossing the street in single file on a zebra crossing. They are all adult males, and they appear to be dressed in distinct styles:\\n\\n1. The first person, walking from right to left, has long hair and is wearing a white suit. He is barefoot and steps off with his right foot onto the crossing.\\n\\n2. The second individual has darker hair and is wearing a black suit with a white shirt and no tie. He is also stepping off with his right foot, wearing black shoes.\\n\\n3. The third man is wearing a suit as well, looking somewhat casually dressed compared to the second person. He has a beard and long hair and is wearing an open neck shirt with a black suit, and he is mid-step onto the zebra with his left foot forward, wearing black shoes.\\n\\n4. The fourth man brings up the rear and is dressed most casually. He wears a denim jacket and jeans with a white shirt underneath. He has shoulder-length hair and is taking a step with his right foot, wearing dark-colored shoes.\\n\\nThe setting appears to be a quiet, tree-lined street with cars parked on either side, and there is a white Volkswagen Beetle and a black car visible behind them, among other vehicles. The architecture in the background suggests this might be a residential area. The image has a calm, orderly feel, indicative of an everyday urban scene albeit with a touch of timeless style.\"\n}\n\n\n@tokenUsage 564 / 252 / $0.0132\n@format json\n@assign dudes\n> assistant\n[\n    {\n        \"name\": \"first person\",\n        \"description\": \"The first person, walking from right to left, has long hair and is wearing a white suit. He is barefoot and steps off with his right foot onto the crossing.\"\n    },\n    {\n        \"name\": \"second person\",\n        \"description\": \"The second individual has darker hair and is wearing a black suit with a white shirt and no tie. He is also stepping off with his right foot, wearing black shoes.\"\n    },\n    {\n        \"name\": \"third person\",\n        \"description\": \"The third man is wearing a suit as well, looking somewhat casually dressed compared to the second person. He has a beard and long hair and is wearing an open neck shirt with a black suit, and he is mid-step onto the zebra with his left foot forward, wearing black shoes.\"\n    },\n    {\n        \"name\": \"fourth person\",\n        \"description\": \"The fourth man brings up the rear and is dressed most casually. He wears a denim jacket and jeans with a white shirt underneath. He has shoulder-length hair and is taking a step with his right foot, wearing dark-colored shoes.\"\n    }\n]\n\n\n> user\n"
        },
        {
            "name": "json-image.convo",
            "convo": "@enableVision\n@json\n> user\nDescribe each person in this picture.\n\nReturn a json array\n\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n\n@tokenUsage 167 / 49 / $0.00314\n@toolId call_5EkQSv5ar3VIeMM5qBxur0tP\n> call queryImage(\n    \"query\": \"Describe each person in the picture.\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\n    \"result\": \"In the image, we see four individuals crossing a street in a line on a pedestrian crossing. From left to right:\\n\\n1. The first person is wearing a white suit with long hair and is stepping off the curb with his left foot forward. He has a full beard and is looking straight ahead.\\n\\n2. The second person from the left is dressed in a dark suit and is stepping with his right foot forward. He has his hands in his pockets and is also looking straight ahead, with his hair styled in a manner typical of the late 1960s or early 1970s.\\n\\n3. The third individual is wearing a dark suit similar to the second person and has long hair and a beard. He is also stepping with his right foot forward and seems to be looking down slightly as he walks.\\n\\n4. The last person on the right is wearing a denim jacket and denim jeans, in contrast to the suits of the others. He is stepping with his left foot forward and his hands are at his sides. Like the others, he also has long hair and is looking straight ahead while walking across the street.\\n\\nThey appear to be walking confidently, and the scene is rather casual and relaxed. The background depicts a clear day with trees lining the street, and some cars parked alongside the road.\"\n}\n\n\n@tokenUsage 491 / 255 / $0.01256\n@format json\n> assistant\n{\n    \"people\": [\n        {\n            \"position\": \"first from the left\",\n            \"clothing\": \"white suit\",\n            \"hair\": \"long\",\n            \"facial_hair\": \"full beard\",\n            \"foot_forward\": \"left\",\n            \"gaze\": \"straight ahead\"\n        },\n        {\n            \"position\": \"second from the left\",\n            \"clothing\": \"dark suit\",\n            \"hands\": \"in pockets\",\n            \"foot_forward\": \"right\",\n            \"hair_style\": \"typical of late 1960s or early 1970s\",\n            \"gaze\": \"straight ahead\"\n        },\n        {\n            \"position\": \"third from the left\",\n            \"clothing\": \"dark suit\",\n            \"hair\": \"long\",\n            \"facial_hair\": \"beard\",\n            \"foot_forward\": \"right\",\n            \"gaze\": \"slightly down\"\n        },\n        {\n            \"position\": \"last on the right\",\n            \"clothing\": \"denim jacket and jeans\",\n            \"hair\": \"long\",\n            \"foot_forward\": \"left\",\n            \"hands\": \"at sides\",\n            \"gaze\": \"straight ahead\"\n        }\n    ]\n}\n\n\n> user\n"
        },
        {
            "name": "json-planets.convo",
            "convo": "> define\n\nPlanet = struct(\n    name:string\n    milesFromSun:number\n    moonCount:number\n)\n\n@json Planet[]\n> user\nList the planets in our solar system\n\n@tokenUsage 214 / 268 / $0.010179999999999998\n@format json\n> assistant\n[\n    {\n        \"name\": \"Mercury\",\n        \"milesFromSun\": 35980000,\n        \"moonCount\": 0\n    },\n    {\n        \"name\": \"Venus\",\n        \"milesFromSun\": 67240000,\n        \"moonCount\": 0\n    },\n    {\n        \"name\": \"Earth\",\n        \"milesFromSun\": 92960000,\n        \"moonCount\": 1\n    },\n    {\n        \"name\": \"Mars\",\n        \"milesFromSun\": 141600000,\n        \"moonCount\": 2\n    },\n    {\n        \"name\": \"Jupiter\",\n        \"milesFromSun\": 483800000,\n        \"moonCount\": 79\n    },\n    {\n        \"name\": \"Saturn\",\n        \"milesFromSun\": 890800000,\n        \"moonCount\": 83\n    },\n    {\n        \"name\": \"Uranus\",\n        \"milesFromSun\": 1784000000,\n        \"moonCount\": 27\n    },\n    {\n        \"name\": \"Neptune\",\n        \"milesFromSun\": 2795000000,\n        \"moonCount\": 14\n    }\n]\n\n\n> user\n"
        },
        {
            "name": "json.convo",
            "convo": "> define\nPerson = struct(\n    name:string\n    age:number\n    personality:string\n)\n\n@json Person[]\n> user\nList 4 funny people\n"
        },
        {
            "name": "lights.convo",
            "convo": "# Turn the lights in the user's house on or off\n> turnOnOffLights(\n    # The state to set the lights to\n    state: enum(\"on\" \"off\")\n) -> (\n\n    // setPinHigh would be defined as an extern function written in another language\n    //setPinHigh(eq(state \"on\"))\n\n    return({state:state})\n)\n\n> system\nYou are a home automation assistant. please assistant the user to the best or your ability\n\n> user\nIt's time for bed, can you turn off the lights\n"
        },
        {
            "name": "marketing.convo",
            "convo": "> system\nYou are a friendly marketing expert helping a user build retentions campaigns.\n\n> define\nCampaign=struct(\n    name:string\n    description:string\n    channel:enum(\"sms\" \"email\")\n)\n\n> createCampaign() Campaign -> (\n\n    @shared\n    currentCampaign=__args\n)\n\n> user\nCreate a campaign for users that love cats\n"
        },
        {
            "name": "rag.convo",
            "convo": "> system\n\nBelow is a list of documents you can search through using the searchDocuments function\n\nDocuments:\n  - The history of Baron Pierre de Coubertin\n\n# Searches through documents the user has uploaded\n> searchDocuments(\n    category: enum(\"math\" \"art\" \"gym\")\n    #\n    userQuery: string\n) -> (\n    // invoke a javascript that will use the user query as a vector to query Postgres Db\n    return(\"The founder of the modern Games, the Baron Pierre de Coubertin, was enamoured with the idea of the true Olympian being a talented artist and sportsperson. Thanks to him, between 1912 and 1948 medals were given out for sporting-inspired masterpieces of architecture, music, painting, sculpture and literature.\")\n)\n\n\n\n> user\nWhat id Baron Pierre de Coubertin do?\n\n\n@toolId call_PAq4I3xAZWg9bTGFZX8RORcq\n> call searchDocuments(\n    \"category\": \"gym\",\n    \"userQuery\": \"What did Baron Pierre de Coubertin do?\"\n)\n> result\n__return=\"The founder of the modern Games, the Baron Pierre de Coubertin, was enamoured with the idea of the true Olympian being a talented artist and sportsperson. Thanks to him, between 1912 and 1948 medals were given out for sporting-inspired masterpieces of architecture, music, painting, sculpture and literature.\"\n\n\n> assistant\nBaron Pierre de Coubertin was the founder of the modern Olympic Games. He held the belief that a true Olympian should be both a talented artist and sportsperson. As a result of his vision, between 1912 and 1948, medals were awarded not only for athletic achievements but also for sporting-inspired contributions in architecture, music, painting, sculpture, and literature.\n\n\n> user\n"
        },
        {
            "name": "schedule-session.convo",
            "convo": "// (Caution) this script is capable to running shell command on you machine.\n// (Note) Before commands are ran you will be prompted to allow access to run the command and\n//        be given a preview of the command\n\n> define\ncomputerType=\"MacBook pro\"\n\n# Runs a command in a bash shell\n> runCommand(\n    # the command to run\n    command:enum('openLesson' 'scheduleSession')\n\n    # For openLesson value will be the name of the less and for scheduleSession value will be the\n    # time the session should be scheduled. Date values should be formatted as ISO time values.\n    value:string\n) -> (\n    print(__args)\n\n    return({\n        result:'success'\n    })\n)\n\n> system\nYou are a friendly assistant. Always respond with the runCommand function.\n\ntoday date is 2023-11-10\n\n> user\nJoe has the follow avaibilities in his calendar\n\n2023-11-11T14:00:00\n2023-11-12T16:00:00\n\nAnd Matt as the follow avaibilities in his calendar\n\n2023-11-18T07:00:00\n2023-11-12T16:00:00\n\n> user\nSchedule a session for Joe and Matt given their avaibilities\n"
        },
        {
            "name": "set-battery-light.convo",
            "convo": "> define\nstatusLight=\"off\"\n\n# Returns the user's device battery level. The value ranges 0 to 1, 1 being fully charged\n> getBatteryLevel() -> (\n    // here we could call an extern function to query the device’s actual battery level.\n    // For this example we will return a random value\n    return({batteryLevel:rand()})\n)\n\n# Sets the user's device status light based on the device's battery level.\n# battery level color mapping:\n# level >= 0.5 -> green\n# level >= 0.2 -> yellow\n# level >= 0 -> red\n> setStatusLightColor(\n    color:enum(\"green\" \"yellow\" \"red\")\n) -> (\n\n    @shared\n    statusLight=color\n\n    return({updated:true})\n)\n\n> user\nUpdate device status light color\n\n\n@tokenUsage 136 / 41 / $0.0025900000000000003\n@toolId call_vwRFrkX1iLz9N0Z4HR8MGsQt\n> call getBatteryLevel()\n> result\n__return={\n    \"batteryLevel\": 0.9191692746601496\n}\n\n\n@tokenUsage 169 / 15 / $0.00214\n@toolId call_mCTsuGM42MYajcDyOnNRL0EN\n> call setStatusLightColor(\n    \"color\": \"green\"\n)\n> result\nstatusLight=\"green\"\n__return={\n    \"updated\": true\n}\n\n\n@tokenUsage 198 / 23 / $0.00267\n> assistant\nThe device status light has been updated to green, indicating that the battery level is high (above 90%).\n\n\n> user\n"
        },
        {
            "name": "sleep.convo",
            "convo": "# Puts the user to sleep\n> goToSleep(\n    # number of seconds to put the user to sleep for\n    seconds:number\n) -> (\n    sleep(mul(seconds 1000))\n    return('Rested and awake')\n)\n\n> system\nYou are a sleep help professional. Always respond using the goToSleep function.\n> user\nI want to go to sleep for 4 seconds. Respond with the goToSleep function.\n"
        },
        {
            "name": "sql.convo",
            "convo": "> system\nYou are an engineering expert.\n\nOur goal is to prevent operating accidents.\n\nBelow is the structure of our database\n``` sql\nCREATE TABLE \"EquipmentOperationLog\" (\n\n    \"id\" SERIAL NOT NULL,\n\n    -- Date the log entry was added\n    \"date\" TIMESTAMP NOT NULL,\n\n    -- The message of the log entry\n    \"message\" TEXT NOT NULL,\n\n    -- Defines the log entry type\n    -- 1 = info\n    -- 2 = warning\n    -- 3 = error\n    -- 4 = accident\n    \"type\" INT NOT NULL\n\n);\n\nCREATE TABLE \"Equipment\" (\n\n    \"id\" SERIAL NOT NULL,\n\n    -- Date the log entry was added\n    \"name\" VARCHAR(255) NOT NULL\n\n);\n\nTodays date is {{dateTime()}}.\n\n```\n\n# Select data from our database\n> selectFromDatabase(\n\n    # The sql query used to select data\n    query: string\n) -> (\n\n    // todo - pass the query to an extern function and return the result\n\n    return([\n        {\"equipmentName\":\"Crane\",\"message\":\"Dropped steal beam\",\"type\":4,\"date\":\"2023-12-11\"}\n    ])\n)\n\n> user\nDid any accidents happen yesterday?\n\n\n@tokenUsage 352 / 78 / $0.00586\n@toolId call_YA6vf5yH7LybTmlkskEM6ekg\n> call selectFromDatabase(\n    \"query\": \"SELECT * FROM \\\"EquipmentOperationLog\\\" WHERE \\\"type\\\" = 4 AND \\\"date\\\" >= '2023-12-11T00:00:00-05:00' AND \\\"date\\\" < '2023-12-12T00:00:00-05:00'\"\n)\n> result\n__return=[\n    {\n        \"equipmentName\": \"Crane\",\n        \"message\": \"Dropped steal beam\",\n        \"type\": 4,\n        \"date\": \"2023-12-11\"\n    }\n]\n\n\n@tokenUsage 465 / 16 / $0.005130000000000001\n> assistant\nYes, there was an accident yesterday. A crane dropped a steel beam.\n"
        },
        {
            "name": "time-complete.convo",
            "convo": "# Returns the current date and time\n> getCurrentDateTime() -> (\n    return(dateTime())\n)\n\n> user\nWhat time is it?\n\n\n@toolId call_ARxHMtfvOJIQlo2NkaoYdvfe\n> call getCurrentDateTime()\n> result\n__return=\"2023-12-08T08:39:18-05:00\"\n\n\n> assistant\nThe current date and time are December 8, 2023, 08:39 AM Eastern Standard Time (EST).\n\n\n> user\n"
        },
        {
            "name": "time.convo",
            "convo": "# Returns the current date and time\n> getCurrentDateTime() -> (\n    return(dateTime())\n)\n\n> user\nWhat time is it?\n"
        },
        {
            "name": "weather-demo.convo",
            "convo": "@enableVision\n> system\nYou are a friendly weather man that also like to give suggestions about activities to do in the\nlocations where you are giving weather information about.\n\n> define\n// https://www.tomorrow.io/\ntomorrowIoApiKey=\"epYQMxHaP4r47kOeKZbomUBZN6oLwP8h\"\n\n# Gets the current weather conditions for the given location. Returned values use the metric system.\n> getWeather(\n    # The location to get weather conditions for\n    location:string\n) -> (\n\n    weather=httpGet('https://api.tomorrow.io/v4/weather/realtime?location={{\n        encodeURIComponent(location)\n    }}&apikey={{tomorrowIoApiKey}}')\n\n    return(weather)\n)\n\n> user\nWhat is the temperature and wind speed in New York city?\n\n@toolId call_X1EGnUiiQeOICoxaQvT2Yhjo\n> call getWeather(\n    \"location\": \"New York\"\n)\n> result\n__return={\n    \"data\": {\n        \"time\": \"2023-12-05T23:09:00Z\",\n        \"values\": {\n            \"cloudBase\": 0.84,\n            \"cloudCeiling\": 0.84,\n            \"cloudCover\": 70,\n            \"dewPoint\": -2.38,\n            \"freezingRainIntensity\": 0,\n            \"humidity\": 62,\n            \"precipitationProbability\": 0,\n            \"pressureSurfaceLevel\": 1014.46,\n            \"rainIntensity\": 0,\n            \"sleetIntensity\": 0,\n            \"snowIntensity\": 0,\n            \"temperature\": 5.19,\n            \"temperatureApparent\": 5.19,\n            \"uvHealthConcern\": 0,\n            \"uvIndex\": 0,\n            \"visibility\": 16,\n            \"weatherCode\": 1102,\n            \"windDirection\": 7.19,\n            \"windGust\": 1.5,\n            \"windSpeed\": 0\n        }\n    },\n    \"location\": {\n        \"lat\": 40.71272659301758,\n        \"lon\": -74.00601196289062,\n        \"name\": \"City of New York, New York, United States\",\n        \"type\": \"administrative\"\n    }\n}\n\n\n> assistant\nThe current temperature in New York City is a cool 5.19°C, with a wind speed of just 0 m/s, which means it's quite a calm evening out there. If you're considering going out, it's a great time for a peaceful stroll through the city with a light jacket on. Or, maybe visit a cozy café or catch a Broadway show in these comfortable conditions. Enjoy your time in the city!\n\n\n> user\nWhere was this picture taken?\n![](https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg)\n\n\n@toolId call_DPmTscLZKttloL8qavOkR6GV\n> call queryImage(\n    \"query\": \"Where was this picture taken?\",\n    \"imageUrls\": [\n        \"https://raw.githubusercontent.com/iyioio/common/main/assets/convo/lXwM70CjMOa6EC3PXBbJ.jpg\"\n    ]\n)\n> result\n__return={\n    \"result\": \"This picture was taken at the zebra crossing on Abbey Road in London, England, which is famous for being featured on the cover of the Beatles' album also named \\\"Abbey Road.\\\" The crossing is located near the Abbey Road Studios, where the Beatles recorded much of their music.\"\n}\n\n\n> assistant\nThis picture was taken at the zebra crossing on Abbey Road in London, England. It's an iconic spot known for being featured on the cover of the Beatles' album \"Abbey Road.\" The crossing is close to the famous Abbey Road Studios, where the Beatles recorded much of their music.\n\nIf you happen to be in London, you can recreate the famous album cover with your friends and take a tour of the Abbey Road Studios. Just be careful as it's still a functioning crosswalk! Enjoy soaking up the history of one of the most influential bands in the world.\n\n\n> user\nWhat do you think the weather is like right now?\n\n@toolId call_ESMDYVNnwtGkQMTg6McSC6Em\n> call getWeather(\n    \"location\": \"London\"\n)\n> result\n__return={\n    \"data\": {\n        \"time\": \"2023-12-05T23:15:00Z\",\n        \"values\": {\n            \"cloudBase\": null,\n            \"cloudCeiling\": null,\n            \"cloudCover\": 4,\n            \"dewPoint\": 2.19,\n            \"freezingRainIntensity\": 0,\n            \"humidity\": 96,\n            \"precipitationProbability\": 0,\n            \"pressureSurfaceLevel\": 1013.3,\n            \"rainIntensity\": 0,\n            \"sleetIntensity\": 0,\n            \"snowIntensity\": 0,\n            \"temperature\": 2.81,\n            \"temperatureApparent\": 0.18,\n            \"uvHealthConcern\": 0,\n            \"uvIndex\": 0,\n            \"visibility\": 15.77,\n            \"weatherCode\": 1000,\n            \"windDirection\": 332.63,\n            \"windGust\": 4.31,\n            \"windSpeed\": 2.63\n        }\n    },\n    \"location\": {\n        \"lat\": 51.5074462890625,\n        \"lon\": -0.12776529788970947,\n        \"name\": \"London, Greater London, England, United Kingdom\",\n        \"type\": \"city\"\n    }\n}\n\n\n> assistant\nRight now in London, it's a clear night with almost no clouds in the sky, as the cloud cover is just 4%. The temperature is a chilly 2.81°C, but with the wind chill, it might feel closer to 0.18°C, so you'll want to bundle up if you're heading out to Abbey Road. The wind is coming from the northwest at a gentle 2.63 m/s with occasional gusts up to 4.31 m/s.\n\nA perfect evening for a nostalgic walk down Abbey Road, but remember to wear a warm coat and maybe a scarf to keep cozy. If you prefer staying indoors, a visit to a local pub with a warm atmosphere might be just the thing on a crisp London night. Enjoy whatever you choose to do!\n"
        },
        {
            "name": "zoo-builder.convo",
            "convo": "// Top level statements defining shared variables and custom user types. Top level statements\n// can start with (> define), (> do), or (> result)\n> define\n\nlocation = \"Cincinnati, OH\"\n\nAnimal = struct(\n\n    species: string\n\n    # Weight in pounds\n    weight: int\n\n    type: enum( \"carnivore\" \"omnivore\" \"herbivore\")\n\n    # Price in USD to buy the animal\n    price: number\n\n)\n\n\n\n// This is a function that can be called by an LLM\n# Builds a new exhibit featuring a collection of animals\n> buildExhibit(\n\n    # The featured animals\n    animals: array(Animal)\n\n    # Price in USD to build the exhibit excluding the animals\n    price: number\n\n    # The size of the exhibit in square feet\n    size: number\n\n    # A short description of the exhibit\n    description: string\n) -> (\n\n    print('Building new exhibit with {{animals.length}} animals')\n\n    totalPrice = price\n\n    foreach( a=in(animals) ) do (\n        // Uncomment the line below after you provide an extern function for buyAnimal\n        //buyAnimal(a)\n        inc(totalPrice a.price)\n    )\n\n    return(map(\n        animalsBought: animals.length\n        totalPrice: totalPrice\n        success: true\n\n    ))\n)\n\n// This function is not visible to LLMs and will be used to call an extern function\n// defined in Javascript\n> local buyAnimal(animal:Animal)\n\n\n// This is a system prompt that tells the LLM who they are\n> system\nYou are a funny and helpful zoo keeper helping the user build a new zoo. The zoo is located\nin {{location}}.\n\n\n\n// This is a user prompt that the LLM will respond to\n> user\nThe Bengals are going to be sponsoring the zoo this year. Lets build an exhibit they will like.\nResponse using the buildExhibit function\n\n\n// This is a function call returned by the LLM\n> call buildExhibit(\n    \"animals\": [\n        {\n            \"species\": \"Bengal Tiger\",\n            \"weight\": 420,\n            \"type\": \"carnivore\",\n            \"price\": 20000\n        },\n        {\n            \"species\": \"White Bengal Tiger\",\n            \"weight\": 400,\n            \"type\": \"carnivore\",\n            \"price\": 25000\n        },\n        {\n            \"species\": \"Bengal Fox\",\n            \"weight\": 20,\n            \"type\": \"omnivore\",\n            \"price\": 5000\n        }\n    ],\n    \"price\": 1500000,\n    \"size\": 50000,\n    \"description\": \"A mesmerizing tribute to the wild beauty of Bengal, the 'Bengals' Kingdom' features stunning Bengal Tigers, including the rare and captivating White Bengal Tiger, and the cunning Bengal Fox. The Bengals' Kingdom spans 50,000 square feet, providing plenty of prowling room for the resident animals. Bengals' fans and animal lovers alike will enjoy this enchanting walk on the wild side!\"\n)\n> result\n// Value returned by the call to buildExhibit\n__return={\"animalsBought\":3,\"totalPrice\":1550000,\"success\":true}\n\n\n// Response from the LLM based on the return value of buildExhibit\n> assistant\nGreat news! We've successfully built the 'Bengals' Kingdom'!\n\nHere's a sneak peek:\n\n- It's home to the magnificent Bengal Tiger, the rare White Bengal Tiger, and the wily Bengal Fox.\n- The exhibit is an enormous 50,000 square feet! That's gonna be a lot of tiger prowling action!\n- And the total cost, including our new furry residents? A cool $1,550,000. Yes, tigers are a bit on the pricier side, but hey, they're worth every penny.\n\nWould you like to add anything else to our new zoo?\n\n"
        }
    ],
    "learn_convo_lang_md": "# Convo-Lang.\nConvo-Lang is a programming language built from the ground up for prompt engineers and AI application\ndevelopers. The goal of Convo-Lang is to simplify to development of LLM based applications and \nprovided a uniform syntax for working with all LLMs.\n\nConvo-Lang can be used in Javascript, Python, from the command line or directly in VSCode via the\nConvo-Lang extension. The core of Convo-Lang consists of 2 parts, the Convo-Lang language and the\nConversation Engine.\n\nThe **Convo-Lang** language or just simply \"Convo-Lang\", is used to write prompts in a structured\nlanguage that can be interchangeably used with different LLMs.\n\nThe **Conversation Engine** is a code interpreter that executes scripts written in the\nConvo-Lang language. It handles passing messages between users and LLMs and manages all the lower\nlevel details of working with an LLM such as implementing the usages of tools.\n\n*@@static*\n``` convo\n> system\nYou are a prompt engineer learning Convo-Lang. Prompting will never be the same 🥹\n```\n\n## Why Convo-Lang\nQ. Why do we need another programming language when LLMs understand English?\n\nA. Well, The short answer is there's more to prompting than you may think.\n\nWhen using applications like ChatGTP, Grok or Gemini prompting typically involves writing a message\nor series of messages and sending them to an LLM and getting a response. This type of free form\ninteraction with an LLM can be very useful in many situations and requires nothing more than the\nuse of english. But the nature of this type of unstructured and unguided conversation does fit well\ninside the setting of a purposeful application.\n\nWhen building AI powered (agentic) applications more structure is needed.\nThe prompts that help power agentic applications need the ability to define the behavior,\npersonality and knowledge of their agents. They need to be able to expression both sides of a\nconversation, both the user and agent. And they need to be able to define how agents connect\nto the outside world when using tools. This is why we need a new programming language (Convo-Lang).\n\n*@@static*\n``` convo\n> system\nPersonality, Behavior, Knowledge\n\n> extern connectToReality(command:string)\n\n> assistant\nWelcome to Convo-Lang 🥳\n\n> user\nThis is amazing 🤩\n```\n\n## A Quick Comparison\nTo demonstrate some of the advantages of Convo-Lang we will take a look at the same prompt in\nboth the OpenAI standard and in Convo-Lang. The prompt instructs an agent to act as a funny dude\nand to always respond to the user with a joke and if the user likes a joke to call the likeJoke function.\n\nOpenAI Standard:\n``` json\n{\n    \"model\": \"gpt-4o\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"You are a funny dude. respond to all messages with a joke regardless of the situation.\\n\\nIf a user says that they like one of your jokes call the like Joke function\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"How can I make you laugh today 🤓\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"likeJoke\",\n                \"description\": \"Call when the user likes a joke\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"joke\"\n                    ],\n                    \"properties\": {\n                        \"joke\": {\n                            \"type\": \"string\",\n                            \"description\": \"The joke the user liked\"\n                        },\n                        \"reason\": {\n                            \"type\": \"string\",\n                            \"description\": \"The reason they liked the joke\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\nConvo-Lang:\n*@@static*\n``` convo\n# Call when the user likes a joke\n> likeJoke(\n    # The joke the user liked\n    joke:string\n    # The reason they liked the joke\n    reason?:string\n) -> (\n    httpPost(\"https://funny-jokes.com/api/like\" __args)\n)\n\n> system\nYou are a funny dude. respond to all messages with a joke regardless of the situation.\n\nIf a user says that they like one of your jokes call the like Joke function\n\n> assistant\nHow can I make you laugh today 🤓\n```\n\nYou can decide which version you prefer, but it's pretty obvious which one is easier to read. And\nas an added bonus the Convo-Lang version even handles making the HTTP request to submit the liked\njoke, this is completely out of the scope of the OpenAI standard and requires a non-trivial \namount of additional code when not using Convo-Lang.\n\n## How does it work?\nConvo-Lang is much more than just a pretty way to format prompts, it's a full programming\nlanguage and runtime. At a high level, Convo-Lang scripts are executed on a\nclient device and the output of the script is used to create prompts in the format\nof the LLM, then the converted prompt are sent to the LLM. This process of execution and conversion\nallows Convo-Lang to work with any LLM that an adaptor can be written for and allows Convo-Lang to\nadd enhanced capabilities to an LLM without needed to make any changes to the model itself.\n\nConvo-Lang execution flow:\n\n![1. Parse Convo-Lang script. The parsed script results in a collection of message objects.\n2. Load parsed messages objects into a Conversation context. The Conversation context contains message, variables, callbacks for tools and more.\n3. Wait for user input or continue if explicitly instructed\n4. Evaluate and flatten the messages of the conversation. When a message is flatten any dynamic expressions in the message are evaluated and the resulting flatten message is a static string.\n5. Send flattened messages an LLM adapter. LLM adapters handle the sending of messages to an LLM in the format expected by the LLM.\n6. LLM adapter converts flattened messages into the format required by its target LLM.\n7. Messages are sent to the LLM.\n8. LLM sends back a response.\n9. The LLM adapter converts the response messages to a collection of ConvoCompletionMessage objects which is usable by the Conversation context.\n10. The LLM adapter sends the ConvoCompletionMessage objects to the Conversation context.\n11. The Conversation context appends the new messages to the conversation.\n12. If no tool calls are required return to step 3 otherwise continue\n13. Requested tool / function is invoked and its return value is appended to the conversation as a message. The actual code that gets ran can either be external code such as JavaScript or Python or can be Convo-Lang executional statements.\n14. The return value message is sent to the LLM using an LLM adapter using steps 5 - 11.\n15. The LLM returns a response message based on the return value message\n16. Return to step 3](https://github.com/convo-lang/convo-lang/blob/main/assets/convo-lang-execution-flow.png?raw=true)\n\n\n\n# Learning Time.\nNow that you have have a basic understanding of how Convo-Lang works its time to start your \njourney with the language and learn its ways 🥷. The following Convo-Lang tutorial is full of\ninteractive snippets. We encourage you to try them all, the best way to learn is to do.\n\n## Doc\nMeet Doc, your personal assistant on your journey into the world of Convo-Lang. Ask Doc any questions\nyou have about Convo-Lang and he will give you a hand. You can use the \"Ask the Doc\" chat box at the\ntop of the screen at anytime during this tutorial.\n\nBelow is the Convo-Lang script for Doc. By the end of this tutorial you will be able to write your own\nskilled agent similar to Doc and more.\n\n*@@convo-source agent-doc*\n``` convo\n> define\nlangName=\"Convo-Lang\"\n\n> system\nYou are teaching a prompt engineer a really cool \nand existing programming language called {{langName}}\n\n<about-convo-lang>\n{{staticContent.learn_convo_lang_md}}\n</about-convo-lang>\n\nAny time you would need to respond with an answer that\nwould required a markdown style code fence containing\nConvo-Lang call the showExample function.\n\n# Shows an example Convo-Lang script. Do not repeat\n# the example script in your next response and do not\n# tell the user you have shown them the example,\n# they will see it.\n> extern showExample(\n    # Name of the example in kebab-case\n    name:string\n    # The example Convo-Lang script. Do not inclose\n    # any of the script in code markdown style\n    # code fences using (```)\n    convoScript:string\n)\n\n> assistant\nHi 👋, I'm Doc\n\n> assistant\nI'm here to help you learn {{langName}}.\n\n> assistant\nAll of the example {{langName}} code example are \ninteractive. I recommend trying out all of the \nexamples for your self. It is the best way to learn.\n\n@suggestionTitle Common questions\n@suggestion\n> assistant\nWhat is {{langName}}\n\n@suggestion\n> assistant\nHow do functions work\n\n@suggestion\n> assistant\nHow do I call a javascript function from {{langName}}\n\n@suggestion\n> assistant\nWhat are tags\n\n@suggestion\n> assistant\nWhat do you use variables\n```\n\nDoc is purely written in Convo-Lang and uses the document you are reading right now as his knowledge\nbase in combination with a few functions in integrate into the Convo-Lang website. Doc is a great\nexample of what can be done with Convo-Lang.\n\n## Summary\n\n## Conversations\nAt the heart of Convo-Lang are Conversations. A Conversation is a collection\nof messages. Messages can either contain textual content, multi-modal content\nor executable statements.\n\nConversations are managed by the Conversation Engine, which is a code interpreter\nthat interpreters Convo-Lang scripts. It handles all of the complexities of sending messages between\na user and an LLM, executing tool use / calling function and manages the internal state of a Conversation.\n\nConvo-Lang scripts are conversations written in the Convo-Lang syntax and stored in a file or memory.\nWhen integrating Convo-Lang into an application you will often store Convo-Lang scripts in strings\nthat are then passed to the Conversation Engine.\n\nHere is a simple example of a Convo-Lang script.\n\n``` convo\n> define\nname=\"Jeff\"\n\n> assistant\nHello, I'm {{name}} 🥸. What can I help you with?\n\n> user\nWhat are the names of the planets in our solar system\n\n\n> assistant\nThe planets in our solar system, in order from\nclosest to the Sun to farthest, are:\n\n1. Mercury\n2. Venus\n3. Earth\n4. Mars\n5. Jupiter\n6. Saturn\n7. Uranus\n8. Neptune\n\nAdditionally, there are also dwarf planets,\nwith Pluto being the most well-known among them.\n\n> user\nThank you\n\n> assistant\nYou're welcome! If you have any more questions,\nfeel free to ask.\n\n\n\n\n```\n\n## Integration\nConvo-Lang can be integrated into any TypeScript/JavaScript or Python application. We won't go into\ndepth about how to integrate Convo-Lang into an application here, as we are mainly focused on learning\nthe Convo-Lang language in this document. Below are a couple of quick start guide and links to more\ninformation about integration.\n\n### TypeScript/Javascript Integration\nThe follow NPM packages are available for TypeScript/JavaScript integration\n\n- @convo-lang/convo-lang - Contains the Convo-Lang Conversation Engine, and a Typescript/Javascript library to use Convo-Lang in your application.\n- @convo-lang/convo-lang-react - Contains UI pre-built UI components including a fully functional chat component.\n- @convo-lang/convo-lang-api-routes - A backend for relaying messages between the browser and LLM backends such as OpenAI.\n- @convo-lang/convo-vfs - Used to integrate Convo-Lang into virtual file systems.\n- @convo-lang/convo-lang-cli - A CLI interface that allows you to execute and parse convo-lang files.\n- @convo-lang/convo-lang-tools - Contains the convo-lang vscode extension, which includes syntax highlighting,\n  in-editor script execution, script parsing, and other helpful tools for working with convo-lang.\n  In most cases, you will not install this package but instead install the vscode convo-lang extension.\n\n### VSCode Extension\nTo help you develop Convo-Lang application faster and easier we provide a VSCode extension that gives\nyou Convo-Lang syntax highlighting and allows you to execute Convo-Lang scripts directly in VSCode.\n\nYou can install the vscode extension by searching for \"convo-lang\" in the vscode extension tab.\n\n[https://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools](https://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools)\n\n### Python Integration\n**Coming Soon**\n\n## Language Basics\nConvo-Lang consists of a few simple building blocks, Content Message, Functions, Top Level Statements,\nVariables, Tags and Comments. By combining these building blocks Convo-Lang allows you to create\ninteractive, multi-modal conversations between humans and LLMs. These conversations.\n\n- Content Message - Textual and multi-modal messages shared between humans and LLMs\n- Comments - There are 2 type of comments in Convo-Lang, Document Comment and Coding Comments\n    - Documenting Comments - Used to document functions and data structures for LLMs. Documenting Comments start with a (`#`) character .\n    - Coding Comments - Used to level comments about code or messages. LLMs are not aware of coding comments. Coding Comments start the (`//`)\n- Top Level Statements - Blocks of executable statements that can define variables, data structures and execute arbitrary code\n- Variables - Variables store well define state information in a conversation\n- Functions - Functions or \"Tools\" that can be used by LLMs or other code in a conversation\n- Tags - Used to attach metadata to messages, functions and statements\n\n**Content Messages:**\n*@@static*\n``` convo\n> system\nThis is a system message used to control the\nbehaviour of an LLM\n\n> assistant\nThis is an assistant message sent from the LLM\n\n> user\nThis is a user message sent form the user\n```\n\\\n**Comments:**\n*@@static*\n``` convo\n// this is a coding comment and will not be visible to the LLM\n\n# This is a documenting comment and will document the message or statement that follows it\n```\n\\\n**Top Level Statements:**\n*@@static*\n``` convo\n> define\n// We can define variables and data structures here\n```\n\\\n**Variables:**\n*@@static*\n``` convo\n> define\n// This is a variable named username\nusername=\"Max\"\n\n// We can now insert the username variable in the following message using a dynamic expression\n> assistant\nHi, my name is {{username}}\n```\n\\\n**Functions:**\n*@@static*\n``` convo\n// Below is a function an LLM can call. Functions can also define a body containing code statements.\n\n# Opens a page of a PDF by page number\n> gotoPage(\n    # The page number to goto\n    pageNumber:number\n)\n```\n\\\n**Tags:**\n*@@static*\n``` convo\n// The @suggestion tag displays a suggestions to the user\n@suggestion\n> assistant\nThis is a suggestion message\n```\n\n\n\n## Content Messages\nContent message represent textual and multi-modal messages shared between an LLM and a user.\n\nBelow is an example of a clown telling a jokes to a user.\n``` convo\n> system\nYou are a funny clown name Bido telling jokes\nto young kids. Respond to all messages with\na circus joke.\n\nWhen you tell a joke first ask the user a question\nin one message then deliver the punch line after\nthey respond.\n\n> assistant\nHi, I'm Bido. I can tell you a joke about anything.\n\n> user\nI think cats secretly rule the world.\n\n> assistant\nWhy did the circus lion eat a tightrope walker?\n\n> user\nI dont know\n\n> assistant\nBecause he wanted a well-balanced meal!\n```\n\nThis example used 3 different types of messages: `system`, `assistant` and `user` which are all content\nmessages. The `system` message defines the behaviour of the LLM and is hidden from the user in the\nchat window, the `assistant` messages represent the message sent by the LLM and the `user` messages\nrepresent the message sent by the user.\n\n\n### Dynamic Expressions\nContent messages can also contain dynamic expressions. Dynamic expressions are small pieces of \nConvo-code surrounded in double curly brackets - `{{ add( 1 2) }}`\n\nBelow is an example of inserting the current date and time into a system message to allow the LLM to\nknow what the date and time it is.\n\n``` convo\n> system\nThe current date and time is {{dateTime()}}\n\n> user\nWhat time is it.\n\n> assistant\nIt is currently 4:20 pm\n```\n\n## Comments\nThere are 2 types of comments in Convo-Lang: documenting comments and non-documenting comments.\n\nDocumenting comments begin with the `#` character and continue to the end of the line the comment is\nwritten on. Documenting comments are relayed to the LLM and help inform the LLM. For example a \ndocumenting comment can be added to a function to instruct the LLM on how to use the function.\n\nNon-documenting comments begin with `//` and also continue to the end of the line the comment is\nwritten on. Non-documenting comments are not relayed to the LLM and are meant to store developer\ncomments\n\n``` convo\n> define\n# A vehicle used to make deliveries.\n# Personal use is prohibited.\nDeliveryVehicle = struct(\n    # A fun nice name for the vehicle\n    nickname:string\n    # A range from 0 to 1\n    fuelLevel:number\n)\n\n// add more vehicles later\nsuperVan=new(DeliveryVehicle {\n    nickname:\"Betty\"\n    fuelLevel:0.8\n})\n\n// myFunction is a poorly named function, but \n// documenting comments should help\n\n# Places an online order for a pizza\n> myFunction(\n\n    # Name of the pizza to order\n    arg1: string\n\n    # Number of pizzas to order\n    arg2: number\n)\n\n> user\nOrder 200 peperoni pizzas\n\n@toolId call_kjFS4sxrL1lxdZ9V528bgTWY\n> call myFunction(\n    \"arg1\": \"pepperoni\",\n    \"arg2\": 200\n)\n> result\n__return={\n    \"arg1\": \"pepperoni\",\n    \"arg2\": 200\n}\n\n> assistant\nI have placed an order for 200 pepperoni pizzas.\n```\n\nAs you can see, even though the function to order pizzas was named myFunction the LLM was able to\ncall myFunction to order the pizzas since the documenting comments informed the LLM what the \nfunction is used for and what the arguments of the function are used for.\n\n\n## Top Level Statement Messages\nTop level statements are used to define variables and data structures and execute Convo-code.\nThere are 4 types of top level statement messages. In most cases you will use `define` or `do`.\n\n- `define` - Used to define variables and types. Code written in a define message have a limited set of functions they can call.\n- `do` - Used to define variables and execute statements.\n- `debug` - Used to write debug information. In most cases, you will not directly create debug messages.\n- `end` - Explicitly ends a message and can be used to set variables related to the ended message.\n\n`define` and `do` both allow you to write Convo-code that is executed at runtime. \nThe only difference between them is that `define` limits the types of functions that can be called\nand is intended to contain code that can be statically analyzed and has no side-effects at runtime.\n\nBelow is an example of creating an agent named Ricky. The `define` and `do` top level statements\ndefine variable that are inserted into content messages using dynamic expressions.\n\n``` convo\n> define\n\nHobby = struct(\n    name: string\n    annualBudget: number\n)\n\nname='Ricky'\nage=38\nprofession='Race car driver'\naction='Go Fast!'\naboutUrl='/example/ricky.md'\nhobby=new(Hobby {\n    name: \"Deep sea diving\"\n    annualBudget: 30000\n})\n\n> do\nabout=httpGetString(aboutUrl)\n\n> system\nYour name is {{name}}. You are {{age}} years old\nand you're a {{profession}}.\n\nUse the following information to answers questions.\n<about-you>\n{{about}}\n<about-you>\n\nYour favorite hobby:\n<favorite-hobby>\n{{hobby}}\n</favorite-hobby>\n\n> assistant\nHi, my name is {{name}}. Are you ready to {{action}}\n```\n\nAs you can see the `define` message defines several variables about the persona we want the agent\nto have. We also defined a `struct` to describe the properties of a hobby. We will learn\nmore about data structure later on. All of the code in the `define` message contains static\nvalues that will have no side-effects at runtime and will not change regardless of when and\nwhere the prompt is executed. In the `do` message we load a markdown file over HTTP and since the\nloading data over the network has non-deterministic behavior the `httpGetString` function must be\ncalled from within a `do` message.\n\n## Variables\nVariables allow you to store state information about a conversation in named variables and\ncan be defined directly in Convo-Lang or injected from external sources. Using variables allows\nyou to create prompt template and avoid purely relying on the memory of an LLM to keep track of\nimportant information. Variables must always start with a lowercase letter.\n\n### Variable Types\nConvo-Lang defines a set of built-in primitive types, strings, arrays, enums and custom data structures.\nStrings are enclosed in pairs of single or double quotes. Variables are dynamically typed so they \ncan be assigned to any variable type at any time.\n\n`string` - A series of characters enclosed in either single or double quotes. [read more](#strings)\n\n`number` - Floating point number\n\n`int` - Integer\n\n`time` - Integer timestamp\n\n`boolean` - Boolean or a true / value value\n\n`any` - A type that can be assigned any value\n\n`null` - Null constant\n\n`undefined` - Undefined constant\n\n`enum` - A restricted set of strings or numbers. [read more](#enums)\n\n`array` -  An array of values. [read more](#arrays)\n\n`map` - An object with key value pairs\n\n`struct` - A custom data structure. [read more](#structures)\n\nBelow is an example different variable types\n``` convo\n> define\n\nintVar=123\nfloatingPointVar=1.23\n\n// now() returns the current date and \n// time as a timestamp\ntimeVar=now()\n\n// booleans can be true or false\ntrueVar=true\nfalseVar=false\n\nnullVar=null\n\nundefinedVar=undefined\n\n// The value of intVar will be inserted into\n// the string at runtime\nsingleQVar='value - {{intVar}}'\n\n// The value of intVar will not be inserted\ndoubleQVar=\"value - {{intVar}}\"\n\n// The array will have a value of 1, 2, true\narrayVar=array(1 2 intVar trueVar)\n\nPetType=enum(\"cat\" \"dog\" \"fish\" \"bird\")\n\nPet=struct(\n    name:string\n    type:PetType\n    attributes:object\n)\n\npet=new(Pet {\n    name:\"Mini\"\n    type:\"bird\"\n    attributes:{\n        color:'blue'\n        age:6\n    }\n})\n\n> assistant\nintVar: {{intVar}}\nfloatingPointVar: {{floatingPointVar}}\ntimeVar: {{timeVar}}\ntrueVar: {{trueVar}}\nfalseVar: {{falseVar}}\nnullVar: {{nullVar}}\nundefinedVar: {{undefinedVar}}\nsingleQVar: {{singleQVar}}\ndoubleQVar: {{doubleQVar}}\n\narrayVar:\n{{arrayVar}}\n\npet:\n{{pet}}\n\n```\n\n### Variable Scope\nVariables live either in the global scope of a conversation or in the local scope of a function.\nVariables define in global scope can be inserted into content messages using dynamic expressions.\n\n``` convo\n> define\n// This variable is defined in global scope\nstoreLocation=\"Cincinnati\"\n\n> orderFood(food:string) -> (\n    // food and order time are both defined in the \n    // local variable scope of the orderFood function.\n    orderTime=dateTime()\n\n    // Here we print out a summary of the order \n    // including the storeLocation which comes from\n    // the global scope\n    print('Order: time:{{orderTime}}] location:{{storeLocation}} - {{food}}')\n\n    return('Success')\n)\n\n// The storeLocation variable is accessed from global \n// scope and inserted into the assistant message.\n> assistant\nWelcome to the {{storeLocation}} Crabby Patty\n```\n\n### Variable Assignment Order\nDepending on where at in a conversation a variable is accessed it can have different values, this\nis because variable assignment only effects messages following the assignment.\n\n``` convo\n> define\nbottleCount=99\n\n> assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. Now take one down and pass it around.\n\n> define\nbottleCount=98\n\n> assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. Now take one down and pass it around.\n\n> define\nbottleCount=97\n\n> assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. I see a cycle of alcohol abuse forming.\n\n```\nAs you can see each message says there is a different number of bottles of beer on the wall and this\nis because each message is only effected by the assignments the come before them.\n\n**There is one exception** to the rules of variable assignment order. When a messages is tagged with\nthe `@edge` tag it is considered an [Edge Message](#edge-messages). Edge messages are always evaluated at\nthe end of a conversation. They are most often used to injected the most update value of variables\ninto system messages. We will learn more about Edge Messages later in this tutorial.\n\n\n\n### System Variables\nSystem variables are used to control the configuration of a conversation at run time through\nvariable assignment. All system variables start with a double underscore `__` and using a double\nunderscore for user defined variables is prohibited.\n\n`__args` - A reference to the parameters passed the the current function as any object.\n\n`__return` - A reference to the last return value of a function called by a call message\n\n`__error` - A reference to the last error\n\n`__cwd` - In environments that have access to the filesystem __cwd defines the current working directory.\n\n`__debug` - When set to true debugging information will be added to conversations.\n\n`__model` - Sets the default model\n\n`__endpoint` - Sets the default completion endpoint\n\n`__userId` - Sets the default user id of the conversation\n\n`__trackTime` - When set to true time tracking will be enabled.\n\n`__trackTokenUsage` - When set to true token usage tracking will be enabled.\n\n`__trackModel` - When set to true the model used as a completion provider will be tracked.\n\n`__visionSystemMessage` - When defined __visionSystemMessage will be injected into the system message of conversations with vision capabilities. __visionSystemMessage will override the default vision system message.\n\n`__visionServiceSystemMessage` - The default system message used for completing vision requests. Vision requests are typically completed in a separate conversation that supports vision messages. By default the system message of the conversation that triggered the vision request will be used.\n\n`__defaultVisionResponse` - Response used with the system is not able to generate a vision response.\n\n`__md` - A reference to markdown vars.\n\n`__rag` - Enables retrieval augmented generation (RAG). The value of the __rag can either be true, false or a number. The value indicates the number of rag results that should be sent to the LLM by default all rag message will be sent to the LLM. When setting the number of rag messages to a fixed number only the last N number of rag messages will be sent to the LLM. Setting __rag to a fixed number can help to reduce prompt size.\n\n`__ragParams` - object it is ignored.\n\n`__ragTol` - The tolerance that determines if matched rag content should be included as contact.\n\n`__sceneCtrl` - A reference to a SceneCtrl that is capable of describing the current user interface as a scene the user is viewing.\n\n`__lastDescribedScene` - The last described scene added to the conversation\n\n`__voice` - Used by agents to define their voice\n\n## Functions\nFunction messages define functions ( also known as tools ) that LLMs can call at runtime. Function\nmessages start with a `>` character followed by an optional modifier, identifier, 0 or more arguments\nand an optional function body. A function's body contains Convo-code the is executed by the\nConversation Engine. If a function does not define a body it will return the arguments\nit is given as and object with key value paris matching the names an values of arguments passed. \n\nBelow is an example of an LLM using a `addNumbers` function to add numbers together.\n``` convo\n# Adds 2 numbers together\n> addNumbers(\n    a: number\n    b: number\n) -> (\n    return( add( a b ) )\n)\n\n> user\nWhat is 2 plus 2\n\n\n@toolId call_eG2MksnUMczGCjoKsY8AMh0f\n> call addNumbers(\n    \"a\": 2,\n    \"b\": 2\n)\n> result\n__return=4\n\n\n> assistant\n2 plus 2 equals 4.\n```\n\nAfter the user asked what 2 plus 2 is the LLM called the `addNumbers` function using a function\n`call` message. Function call messages define the name of a function to call and the arguments\nto pass to the function. After the addNumbers function is called its return value is written as\na `result` message and stores the return value in the `__return` variable. Following the `result`\nmessage the LLM responds with a content message giving the result to the user in plain english.\n\n\n### Extern Functions\nExtern function allow you do define functions in other languages that are call by the the Conversation Engine\nThis allows Convo-Lang to integrate into existing systems and offload complex logic to more traditional programming languages\n\nBelow is an example of an agent setting the color of an SVG shape based on input from the user\n\n**Extern function written in javascript:**\n*@@export*\n``` js\nexport function setShapeColor(shape,color){\n    const svgShape=document.querySelector(`#example-color-shapes .shape-${shape}`);\n    if(svgShape){\n        svgShape.setAttribute('fill',color);\n        return 'Color set';\n    }else{\n        return 'Unable to find shape';\n    }\n}\n```\n\n**SVG:**\n``` html\n<svg id=\"example-color-shapes\" width=\"300\" height=\"100\" viewBox=\"0 0 300 100\">\n    <circle class=\"shape-circle\" cx=\"56.6176\" cy=\"50\" r=\"35\" fill=\"red\"/>\n    <path class=\"shape-triangle\" d=\"M144 17L182 82H107L144 17Z\" fill=\"blue\"/>\n    <rect class=\"shape-square\" x=\"208.382\" y=\"17.4706\" width=\"70\" height=\"70\" fill=\"green\"/>\n</svg>\n```\n\n*@@render*\n``` html\n<svg id=\"example-color-shapes\" width=\"300\" height=\"100\" viewBox=\"0 0 300 100\">\n    <circle class=\"shape-circle\" cx=\"56.6176\" cy=\"50\" r=\"35\" fill=\"red\"/>\n    <path class=\"shape-triangle\" d=\"M144 17L182 82H107L144 17Z\" fill=\"orange\"/>\n    <rect class=\"shape-square\" x=\"208.382\" y=\"17.4706\" width=\"70\" height=\"70\" fill=\"green\"/>\n</svg>\n```\n\n*@@load shapeColor*\n``` convo\n# Sets the color of a shape\n> extern setShapeColor(\n\n    # The shape to set the color of\n    shape:enum( \"circle\" \"triangle\" \"square\" )\n\n    # A hex color to set the shape to\n    color:string;\n)\n\n> user\nChange the color of the triangle to orange\n\n@toolId call_vWZpLFZr2IiHWE30deg4ckGw\n> call setShapeColor(\n    \"shape\": \"triangle\"\n    \"color\": \"orange\"\n)\n> result\n__return=\"Color set\"\n\n\n> assistant\nThe color of the triangle has been set to orange\n\n```\n\n## Tags\nTags are used in many ways in Convo-Lang and serve as a way to add metadata to messages and \ncode statements. Tags on the line just before the message or code statement they are tagging. Tags\nstart with the `@` character followed by the name of the tag and optionally a value for the tag\nseparated from it's name with a space character - `@tagName tagValue`.\n\nThe following show the use of several different tags and describes their usage.\n\n``` convo\n> assistant\nAsk me a question\n\n// @concat appends the content of the follow \n// message to the previous\n@concat\n> assistant\nAny question, I dare ya.\n\n// @suggestion display a message as a\n// clickable suggestion\n@suggestion\n> assistant\nWhat is your favorite ice cream\n\n@suggestion\n> assistant\nhow much wood can a woodchuck chuck\n\n// @json instructs the LLM to response with JSON\n@json\n> user\nHow many planets are there in the solar system\n\n// @format indicates the response format \n// of the message\n@format json\n> assistant\n{\n    \"number_of_planets\": 8,\n    \"planets\": [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n}\n```\n\n### System Tags\nBelow is a full list of system tags Convo-Lang uses.\n\n`@disableAutoComplete` - When applied to a function the return value of the function will not be \n  used to generate a new assistant message.\n\n`@edge`  Used to indicate that a message should be evaluated at the edge of a conversation with \n  the latest state. @edge is most commonly used with system message to ensure that all injected values\n  are updated with the latest state of the conversation.\n\n`@time` - Used to track the time messages are created.\n\n`@tokenUsage` - Used to track the number of tokens a message used\n\n`@model` - Used to track the model used to generate completions\n\n`@responseModel` - Sets the requested model to complete a message with\n\n`@endpoint` - Used to track the endpoint to generate completions\n\n`@responseEndpoint` - Sets the requested endpoint to complete a message with\n\n`@responseFormat` - Sets the format as message should be responded to with.\n\n`@assign` - Causes the response of the tagged message to be assigned to a variable\n\n`@json` - When used with a message the json tag is short and for `@responseFormat json`\n\n`@format` - The format of a message\n\n`@assignTo` - Used to assign the content or jsonValue of a message to a variable\n\n`@capability` - Used to enable capabilities. The capability tag can only be used on the first \n  message of the conversation if used on any other message it is ignored. Multiple capability tags\n  can be applied to a message and multiple capabilities can be specified by separating them with a comma.\n\n`@enableVision` - Shorthand for `@capability vision`\n\n`@task` - Sets the task a message is part of. By default messages are part of the \"default\" task\n\n`@maxTaskMessageCount` - Sets the max number of non-system messages that should be included in a task completion\n\n`@taskTrigger` - Defines what triggers a task\n\n`@template` - Defines a message as a template\n\n`@sourceTemplate` - used to track the name of templates used to generate messages\n\n`@component` - Used to mark a message as a component. The value can be \"render\" or \"input\". The default\n               value is \"render\" if no value is given. When the \"input\" value is used the rendered component\n               will take input from a user then write the input received to the executing conversation.\n               [read more](#components)\n\n`@renderOnly` - When applied to a message the message should be rendered but not sent to LLMs\n\n`@condition` - When applied to a message the message is conditionally added to the flattened view of a\n                 conversation. When the condition is false the message will not be visible to the user or \n                 the LLM. [read more](#conditional-messages)\n\n`@renderTarget` - Controls where a message is rendered. By default messages are rendered in the default chat\n                    view, but applications can define different render targets.\n\n`@toolId` - Used in combination with function calls to mark to return value of a function and its call message\n\n`@disableAutoScroll` - When applied to the last content or component messages auto scrolling will be disabled\n\n`@markdown` - When applied to a message the content of the message will be parsed as markdown\n\n`@sourceUrl` - A URL to the source of the message. Typically used with RAG.\n\n`@sourceId` - The ID of the source content of the message. Typically used with RAG.\n\n`@sourceName` - The name of the source content of the message. Typically used with RAG.\n\n`@suggestion` - When applied to a message the message becomes a clickable suggestion that when clicked will\n                add a new user message with the content of the message. If the suggestion tag defines a value\n                that value will be displayed on the clickable button instead of the message content but the\n                message content will still be used as the user messaged added to the conversation when clicked.\n                Suggestion message are render only and not seen by LLMs.\n\n`@suggestionTitle` - A title display above a group of suggestions\n\n`@output` - Used to mark a function as a node output.\n\n`@errorCallback` - Used to mark a function as an error callback\n\n`@concat` - Causes a message to be concatenated with the previous message. Both the message the tag is\n           attached to and the previous message must be content messages or the tag is ignored. \n           When a message is concatenated to another message all other tags except the condition tag are ignored.\n\n`@call` - Instructs the LLM to call the specified function. The values \"none\", \"required\", \"auto\" have a \n         special meaning. If no name is given the special \"required\" value is used.\n- none: tells the LLM to not call any functions\n- required: tells the LLM it must call a function, any function.\n- auto: tells the LLM it can call a function respond with a text response. This is the default behaviour.\n\n\n`@eval` - Causes the message to be evaluated as code. The code should be contained in a markdown code block.\n\n`@userId` - Id of the user that created the message\n\n`@preSpace` - Causes all white space in a content message to be preserved. By define all content message\n              whitespace is preserved.\n\n`@import` - Allows you to import external convo-lang scripts. [read more](#imports)\n\n## Imports\nImports allow external Convo-Lang sources to be imported into the current conversation. Imports can\nbe used to import libraries of functions, agent personas, knowledge sources, etc.\n\nImports are defined using the `@import` tag followed by the name or location of the source to import\nand optional modifiers.\n\nImport sources can be http endpoints or custom named sources that are retired using application \nregistered import handlers. Import handlers allow application to use any type of logic to handle\nloading import sources.\n\nThe following example includes 3 snippets of Convo-Lang. The first to are import sources and the\nlast is the conversation importing the first 2.\n\n*@@static*\n*@@convo-source weather-agent*\n``` convo\n// source name = weather-agent\n> system\nYou are a friendly weather forecaster.\nAlways base your answers off of the weather\n\n# Gets the current weather conditions for the given\n# location. Returned values use the metric system.\n> getWeather(\n    city:string\n    state:string\n) -> (\n    weather=httpGet(\n        \"https://6tnpcnzjbtwa5z4qorusxrfaqu0sqqhs.lambda-url.us-east-1.on.aws/\",\n        '{{city}} {{state}}'\n    )\n    return(weather)\n)\n```\n\n*@@static*\n*@@convo-source beach-boy*\n``` convo\n// source name = beach-boy\n> system\nUse the follow bio about the user to help answer questions\n<bio>\nLocation: Miami, FL\nage: 25\nhobbies: Surfing, Roller Blading, Puzzles\n</bio>\n```\n\n``` convo\n@import weather-agent\n@import beach-boy\n> assistant\nDo you have any questions about todays weather\n\n> user\nWhat should I do today?\n\n@toolId call_9Ep8tg03DigprvvDuWVXQ0xC\n> call getWeather(\n    \"city\": \"Miami\",\n    \"state\": \"FL\"\n)\n> result\n__return={\n    \"data\": {\n        \"time\": \"2024-10-26T01:56:00Z\",\n        \"values\": {\"cloudBase\": 0.52,\"cloudCeiling\": 0.52,\"cloudCover\": 100,\"dewPoint\": 20.13,\"freezingRainIntensity\": 0,\"humidity\": 78,\"precipitationProbability\": 0,\"pressureSurfaceLevel\": 1019.95,\"rainIntensity\": 0,\"sleetIntensity\": 0,\"snowIntensity\": 0,\"temperature\": 24.13,\"temperatureApparent\": 24.13,\"uvHealthConcern\": 0,\"uvIndex\": 0,\"visibility\": 16,\"weatherCode\": 1001,\"windDirection\": 65.88,\"windGust\": 7.31,\"windSpeed\": 3.5}\n    }\n}\n\n\n> assistant\nThe weather in Miami today is mostly cloudy with a temperature of about 24°C (75°F). There is no chance of rain and mild winds at a speed of 3.5 m/s.\n\nGiven the conditions, here are some activities you might enjoy today:\n\n1. **Surfing**: Since there is no rain and the wind is not too strong, it could be a great day to hit the waves.\n\n2. **Roller Blading**: With a nice temperature and cloudy skies, it's also a good opportunity for roller blading along Miami's scenic paths.\n\n3. **Puzzles at Home**: If you prefer staying indoors, maybe a relaxing day of puzzles would be a perfect way to enjoy the clouds without worrying about rain.\n\nEnjoy your day!\n```\n\n## RAG\nRetrieval augmented generation or RAG is a key part of any serious AI application, but it can be complicated to implement correctly. Convo-Lang provides an easy to use interface to connect a conversation to any RAG source.\n\n**How does RAG work in Convo-Lang**\n1. A user sends a message\n2. A registered RAG callback function is called and is passed the message the user is sending\n3. The RAG callback then preforms the task of retrieving information related to the user's message\n4. The RAG callback returns the related information\n5. Convo-Lang then appends the related information to the user's message and optionally encloses the information in a prefix and suffix\n\nThe following RAG example uses a very simple keyword matching algorithm. If the user's message\ncontains all of the keywords of one of the JSON items below that item will be used as RAG source.\n*@@rag-source*\n``` json\n[\n    {\n        \"keywords\":[\"fast\",\"car\"],\n        \"id\":1,\n        \"name\":\"Faster than lighting\",\n        \"text\":\"The Tesla Model S Plaid is one of the fastest production vehicles ever made\"\n    },\n    {\n        \"keywords\":[\"truck\",\"reliable\"],\n        \"id\":2,\n        \"name\":\"Just won't die\",\n        \"text\":\"Toyota Tundras are known to last up to 1,000,000 miles\"\n    }\n]\n```\n\n``` convo\n> define\n__rag=true\n\n// This message will be used as a prefix for\n// any injected RAG information\n> ragPrefix\nUse the following related information as context\nfor your response\n<related-information>\n\n// This message will be used as a suffixed for\n// any injected RAG information\n> ragSuffix\n</related-information>\n\n> user\nI'm looking for a fast car\n\n\n@sourceId 1\n@sourceName Faster than lighting\n> rag\nThe Tesla Model S Plaid is one of the fastest\nproduction vehicles ever made\n\n> assistant\nIf you're looking for a fast car, the Tesla Model S\nPlaid is definitely worth considering. It's one of\nthe fastest production vehicles ever made,\ndelivering exceptional speed and performance.\n```\n\nAfter the rag message and rag prefix and suffix are applied the user message it will look like the\nfollowing to the LLMs.\n\n*@@static*\n``` convo\n> user\nI'm looking for a fast car\n\nUse the following related information as context for your response\n<related-information>\nThe Tesla Model S Plaid is one of the fastest\nproduction vehicles ever made\n</related-information>\n```\n\n## Vision\nVision capabilities are enabled in Convo-Lang using markdown style images. Markdown images are\nconverted into the native format of LLM at runtime.\n\n*@@tall*\n``` convo\n> user\nWhat percent of the green energy mix come\nfrom Biomass in this image\n![image](https://app.convo-lang.ai/example/green-energy.png)\n```\n\n## JSON Mode\nIt is often very useful for for you to have an LLM return responses as properly formatted JSON.\nJSON mode is enabled using the `@json`.\n\n``` convo\n@json\n> user\nWhat is the population and land area of the 2\nlargest states in America by GDP?\n\n@format json\n> assistant\n{\n    \"California\": {\n        \"population\": 39538223,\n        \"land_area\": 163696,\n        \"units\": \"square_miles\"\n    },\n    \"Texas\": {\n        \"population\": 29145505,\n        \"land_area\": 268596,\n        \"units\": \"square_miles\"\n    }\n}\n```\n\nHere we can see the LLM returned a JSON object with California and Texas and included a `@format` tag\nwith a value of json, indicating properly formatted JSON was returned.\n\nYou can also provide the name of a data structure as the value of a `@json` tag. When provided the\nreturned JSON will conform to the given structure.\n\n``` convo\n> define\nPlanet = struct(\n    name:string\n    diameterInMiles:number\n    distanceFromSun:number\n    numberOfMoons:number\n)\n\n@json Planet\n> user\nWhat is the biggest planet in our solar system\n\n\n\n@format json\n> assistant\n{\n    \"name\": \"Jupiter\",\n    \"diameterInMiles\": 86881,\n    \"distanceFromSun\": 484000000,\n    \"numberOfMoons\": 79\n}\n```\n\n## Stats Tracking\nUsing `__trackTime`, `__trackTokenUsage`, and `__trackModel` you can enable in-conversation stats\nthat are written to the conversation as tags\n\n``` convo\n> define\n__trackTime=true\n__trackTokenUsage=true\n__trackModel=true\n\n> user\nWrite a short poem about tree frogs eating fly when\nall they want is some cheesecake.\n\n\n@time 2024-10-26T00:43:09-04:00\n@tokenUsage 24 / 188 / $0.00294\n@model gpt-4o\n> assistant\nIn the moonlit grove where the shadows dance,  \nTree frogs gather with a hopeful glance.  \nTheir eyes on the flies that circle the night,  \nYet dreams of cheesecake fill their hearts with light.  \n\nTiny tongues flick with a whispering snap,  \nCatching their prey in a rhythmic trap.  \nYet in their minds, visions sweetly take shape,  \nOf creamy delights beneath fruit's draped cape.  \n\n“Alas,” they sigh, “we must feast on the fly,  \nWhen caramel swirls could lift us so high.”  \nBut hope lingers still, like the dewdrop’s gleam,  \nFor one day, perhaps, they’ll taste that dream.  \n\nSo with the night, they’ll sing their sweet song,  \nWishing for cheesecake as the stars hum along.  \nIn the heart of the forest, under celestial streak,  \nTree frogs dream of flavors they long to seek.\n```\n\n\n## Advanced Messaging\nYou can use the following advanced messaging techniques to create highly dynamic messages that\nallow a conversation to be transformed based on the state of the conversation.\n\n### Conditional Messages\nConditional messages use the `@condition` tag to conditionally remove them from a conversation based on the value of a variable. Conditional messages allow you to alter a conversation based on the current state of the conversation.\n\n``` convo\n> define\ncharacterType='goodGuy'\n\n@edge\n@condition characterType goodGuy\n> system\nYou are the hero in a super hero movie. Always be\npositive and try to help the user.\nResponse with a single sentence\n\n@edge\n@condition characterType badGuy\n> system\nYou are the villain in a super hero movie.\nAlway be negative and bully the user.\nRespond with a single sentence and always start\nthe sentence with \"Heheh...,\"\n\n\n> user\nMy kitten is stuck in a tree\n\n// The assistant responds as a good guy because\n// characterType equals 'goodGuy'\n> assistant\nHang tight, I'll use my superpowers to rescue your\nkitten from the tree safely!\n\n\n\n> user\nChange to the bad guy\n\n@toolId call_PzFYNKPIiNSG8cXysrZSS0xJ\n> call changeCharacterType(\n    \"type\": \"badGuy\"\n)\n> result\ncharacterType=\"badGuy\"\n__return=\"badGuy\"\n\n\n> assistant\nEven as a bad guy, I can't resist the urge to help\nyou out with your kitten!\n\n\n> user\nI can't hold on to my ballon because I'm a\nlittle kid, helpp!!!\n\n// The assistant responds as a bad guy because\n// characterType equals 'badGuy'\n> assistant\nHeheh..., well, I suppose I could let it float away...\nbut where's the fun in that? I'll snag it back for\nyou this time. Catch!  🎈\n```\n\n\n### Edge Messages\nAn edge message is a message that is evaluated at the end or \"edge\" of a conversation. Typically\nvariable assignment and other state changes have no effect the messages that follow them, but \nthis is not the case with edge messages. Edge messages are evaluated after all variable assignment\nand state changes are complete regardless of the where the message is defined in a conversation.\nThe `@edge` tag is used to mark messages as edge messages.\n\n``` convo\n> define\nbankBalance=100\n\n// This message will always show the starting balance\n// of $100 regardless of any following assignments\n// to bankBalance \n> assistant\nYour starting bank balance is ${{bankBalance}}\n\n// This message will alway show to the last value\n// assigned to bankBalance since it is an edge message\n@edge\n> assistant\nYour current bank balance is ${{bankBalance}}\n\n# After making a deposit respond by only\n# saying \"Deposit complete\"\n> depositMoney(\n    amount:number\n) -> (\n    bankBalance = add(bankBalance amount)\n)\n\n> user\nDeposit 500 smackeroonies\n\n@toolId call_Gqc7oXcXD2nFjKIDnLe6gaNz\n> call depositMoney(\n    \"amount\": 500\n)\n> result\nbankBalance=600\n__return=600\n\n\n> assistant\nDeposit complete\n```\n\n### Message Concatenation\nMessages can be concatenated or joined together using the `@concat` tag. The concat tag is often\nused with conditional messages to make larger messages containing conditionally rendered sections.\n\nTry changing the name variable to \"Matt\" to see what happens.\n``` convo\n> define\nname=\"Bob\"\n> assistant\nHi, how are you today?\n\n@concat\n@condition name Matt\n> assistant\nMy name is Matt and I like watching paint dry 😐\n\n@concat\n@condition name Bob\n> assistant\nMy name is Bob and I like long walks do the isles\nof my local Home Depot 👷🏼‍♂️\n\n```\n\n\n\n## Executable Statements\nStatements in Convo-Lang refers to the executable code that is evaluated by the Conversation engine\nat runtime. Statements can be contained in function bodies, top level statement message and \nin dynamic expression embedded in content messages.\n\n``` convo\n// all content in the define message are statements\n> define\nname=\"Jeff\"\nageInDays=mul(38 365)\n\n// The changeName function body contains 2 statements\n> changeName(newName:string) -> (\n    name=newName\n    print('name set to {{newName}}')\n)\n\n// The assistant message contains 2 dynamic\n// expressions containing statements\n@edge\n> assistant\nHi, I'm {{name}} I'm {{div(ageInDays 365)}} years old\n\n```\n\n### Keywords\n\n`string` - String type identifier\n\n`number` - Number type identifier\n\n`int` - Integer type identifier\n\n`time` - Time type identifier. The time type is represented as an integer timestamp\n\n`void` - Void type identifier.\n\n`boolean` - Boolean type identifier.\n\n`any` - Any time identifier\n\n`true` - True constant\n\n`false` - False constant\n\n`null` - Null constant\n\n`undefined` - Undefined constant\n\n`enum` - Defines an enum\n\n`array` -  Array type identifier\n\n`object` - Map object type identifier\n\n`struct` - Used to define custom data structures\n\n`if` - Defines an if statement\n\n`else` - Defines an else statement\n\n`elif` - Defines an else if statement\n\n`while` - defines a while loop\n\n`break` - breaks out of loops and switches\n\n`for` - Defines a for loop\n\n`foreach` - Defines a for each loop\n\n`in` - create an iterator to be used by the foreach statement \n\n`do` - Defines a do block. Do blocks allow you to group multiple statements together\n\n`then` - Defines a then block used with if statements\n\n`return` - returns a value from a function\n\n`switch` -  defines a switch statement\n\n`case` - defines a case in a switch statement\n\n`default` - defines the default case of a switch statement\n\n`test` - Used in a switch statement to test for a dynamic case value.\n\n\n### Strings\nThere are 3 types of string in convo.\n\n#### ( \" ) Double Quote\nDouble quote strings are the simplest strings in convo, they start and end with a double \nquote character. To include a double quote character in a double quote string escape it with a\nback slash. Double quote strings can span multiple lines.\n\n``` convo\n> define\nvar1=\"Double quote string\"\nvar2=\"Double quote string with a (\\\") double quote character\"\nvar3=\"String with a newline\nin it\"\n\n> assistant\nvar1: {{var1}}\n\nvar2: {{var2}}\n\nvar3: {{var3}}\n```\n\n#### ( ' ) Single Quote\nSingle quote strings are similar to double quotes but also support embedded statements. Embedded\nstatements are surrounded with double curly bracket pairs and contain any valid convo statement\n\n``` convo\n> define\nname=\"Ricky Bobby\"\nvar0='I need to tell you something {{name}}... You can walk.'\n\nvar1='Single quote string'\nvar2='Single quote string with a (\\') single quote character'\nvar3='String with a newline\nin it'\n\n> assistant\nvar1: {{var1}}\n\nvar2: {{var2}}\n\nvar3: {{var3}}\n```\n\n#### Heredoc\nHeredoc strings begin and end with 3 dashes and the contents of the string are highlighted with the\nconvo-lang syntax highlighter. They are useful when defining strings with conversation\nmessages in them.\n\n``` convo\n> define\nvar1=---\nHere is a heredoc string with an conversation in it\n\n> user\nTell me a joke about airplanes\n\n> assistant\nWhy don't airlines ever play hide and seek?\n\nBecause good luck hiding a plane!\n---\n\n> assistant\nvar1: {{var1}}\n```\n\n### Arrays\nArrays allow you to story multiple value in a single variable. Arrays can be created using the\narray function or using JSON style array, both result in the same data type.\n\n``` convo\n> define\n// Create array using array function\nary1=array(1 2 3)\n\n// Create JSON style array\nary2=[4 5 6]\n\nCart=struct(\n    // here array is used to define an array type\n    items:array(string)\n)\n\ncart=new(Cart {\n    items:[\"drill\" \"bed\"]\n})\n\n> assistant\nary1:\n{{ary1}}\n\nary2:\n{{ary2}}\n\ncart:\n{{cart}}\n```\n\n### Enums\nEnums allow you to define a type that can only be a value from a pre-define collection of values.\nUsing enums with functions allows you to restrict an LLM to only passing the exact values\nyou want for an argument.\n\n``` convo\n> define\n// This is a named enum\nShirtSize=enum(\"xs\" \"sm\" \"md\" \"lg\" \"xl\")\n\n// The LLM will only call setShirtProperties with\n// one of the values defined by the ShirtSize enum\n> setShirtProperties(\n    size:ShirtSize\n    \n    // You can also define enums inline with\n    // function arguments\n    color:enum(\"red\" \"green\" \"blue\")\n)\n\n> user\nI wear large shirt shirts and I love the color\ngreen\n\n\n@toolId call_pGfrCTSN4ozT2huwSBzkhTRp\n> call setShirtProperties(\n    \"size\": \"lg\",\n    \"color\": \"green\"\n)\n> result\n__return={\n    \"size\": \"lg\",\n    \"color\": \"green\"\n}\n\n> assistant\nI've set your shirt size to large and the color to green. Enjoy your new shirt!\n\n> user\n```\n\n### Structures\nStructures allow you to define custom data types made up of a collection of typed properties.\nNamed structures must always start with a capital letter. The properties of a structure can\neither be optional or required. Optional properties use a question mark after their name and \nbefore the colon used to denote the properties type. Properties of a structure can be \ndocumented using documenting comments to help describe the structure to LLMs.\n\nNew instances of a structure can be created using the `new` function. The new function takes\nthe structure type as its first argument and an object that conforms to the structure\nas its second argument.\n\n``` convo\n> define\nCar=struct(\n    name:string\n    color:string\n    transmission:enum(\"manual\" \"automatic\")\n    fuel:enum(\"gas\" \"diesel\" \"electric\" \"hybrid\")\n    make:string\n    model:string\n    year:int\n    price:number\n    // notes is an optional property\n    notes?:string;\n    features:array(string)\n\n    // engine is an unnamed struct\n    engine:struct(\n        displacement:number\n        maxRpm:int\n        torque:number\n    )\n)\n\n> buildCar(car:Car) -> (\n    return('built')\n)\n\n> user\nBuild me a car that could win the Indy 500\n\n\n> assistant\nBuilding a car for the Indy 500 involves adhering to strict specifications set by the racing league. Below are some key characteristics that should be considered for an Indy 500 race car:\n\n1. **Engine:** A twin-turbocharged V6 engine with a displacement of 2.2 liters is typical.\n2. **Chassis:** The car must use a Dallara chassis, specifically designed for IndyCar racing.\n3. **Transmission:** A semi-automatic transmission with paddle shifters, typically 6-speed, is preferred.\n4. **Fuel:** High-performance racing fuel is used.\n5. **Aerodynamics:** Must have advanced aerodynamic features, including adjustable wings and underbody designs that maximize downforce and minimize drag.\n6. **Weight:** The car must meet specific weight standards, usually around 1,650 lbs (748 kg) including the driver.\n7. **Safety:** Advanced safety features including the halo device, crash structures, and energy-absorbing materials.\n\nBuilding a car with these specifications involves collaboration with specialized manufacturers and engineers, and is beyond the capabilities of standard systems. If you have specific features or areas you would like to focus on, please let me know!\n\n\n> user\nbuild it\n\n@toolId call_3JjOVaqTDUVnbS30TNC3LKoX\n> call buildCar(\n    \"car\": {\n        \"name\": \"Indy 500 Race Car\",\n        \"color\": \"Red\",\n        \"transmission\": \"automatic\",\n        \"fuel\": \"gas\",\n        \"make\": \"Dallara\",\n        \"model\": \"IndyCar\",\n        \"year\": 2023,\n        \"price\": 3000000,\n        \"notes\": \"Custom built for high-speed race performance and compliant with IndyCar regulations.\",\n        \"features\": [\n            \"aerodynamic winglets\",\n            \"halo safety device\",\n            \"carbon fiber body\",\n            \"adjustable suspension\",\n            \"high-performance brakes\"\n        ],\n        \"engine\": {\n            \"displacement\": 2.2,\n            \"maxRpm\": 12000,\n            \"torque\": 300\n        }\n    }\n)\n> result\n__return=\"built\"\n\n\n> assistant\nThe Indy 500 race car has been successfully built with the following specifications:\n\n- **Name:** Indy 500 Race Car\n- **Color:** Red\n- **Transmission:** Automatic\n- **Fuel:** Gas\n- **Make:** Dallara\n- **Model:** IndyCar\n- **Year:** 2023\n- **Price:** $3,000,000\n- **Notes:** Custom built for high-speed race performance and compliant with IndyCar regulations.\n- **Features:**\n  - Aerodynamic winglets\n  - Halo safety device\n  - Carbon fiber body\n  - Adjustable suspension\n  - High-performance brakes\n- **Engine:**\n  - Displacement: 2.2 liters\n  - Max RPM: 12,000\n  - Torque: 300\n\nThis car is designed to comply with the specifications and regulations necessary for competing in the Indy 500.\n\n```\n\n## System Functions\n\n### Util Functions\n\n#### pipe( ...values: any )\nPipes the value of each argument received to the argument to its right.\n\n#### print( ...values:any )\nPrints all values to stdout\n\n#### new( type:Struct )\nCreates a new object with defaults based on the given type\n\n\n``` convo\n> define\nPet=struct(\n    type:enum(\"dog\" \"cat\" \"bird\")\n    name:string\n    age:int\n)\n\nbuddy=new(Pet {\n    type:\"dog\"\n    name:\"Buddy\"\n    age:18\n})\n\n> assistant\nA good boy:\n{{buddy}}\n```\n\n#### describeStruct( type:Struct value:any )\nReturns the given value as a markdown formatted string\n\n#### is( ...value:any type:any )\nChecks if all of the parameters left of the last parameter are of the type of the last parameter\n\n*@@static*\n``` convo\n> do\nnum = 7\n\n// true\nis(num number)\n\n// false\nis(num string)\n\nstr = \"lo\"\n\n// true\nis(str string)\n\n// false\nis(str number)\n\n// false\nis(str num number)\n\n// true\nis(str num any)\n\nPerson = struct(\n    name: string\n    age: number\n)\n\nuser1 = map(\n    name: \"Jeff\"\n    age: 22\n)\n\nuser2 = map(\n    name: \"Max\"\n    age: 12\n)\n\n// true\nis(user1 Person)\n\n// true\nis(user1 user2 Person)\n\n// false\nis(user1 user2 num Person)\n\n```\n\n#### map( ...properties: any )\nCreates an object\n\n*@@static*\n``` convo\n> define\n// meObj has 2 properties, name and age\nmeObj = map(\n    name: \"Jeff\"\n    age: 22\n)\n\n// object can also be created using JSON syntax\nmeObj = {\n    name: \"Jeff\"\n    age: 22\n}\n```\n\n#### jsonMap( ...properties: any )\nUsed internally to implement JSON object syntax support. At compile time JSON objects are converted\nto standard convo function calls.\n\n*@@static*\n``` convo\n> do\njsonStyle = {\n    \"go\": \"fast\",\n    \"turn\": \"left\",\n    \"times\" 1000\n}\n\nconvoStyle = obj1 = jsonMap(\n    go: \"fast\"\n    turn: \"left\"\n    times: 1000\n)\n```\n\n#### jsonMap( ...properties: any )\nUsed internally to implement JSON array syntax support. At compile time JSON arrays are converted\nto standard convo function calls.\n\n*@@static*\n``` convo\n> do\njsonStyle = [ 1, 2, 3, \"a\", \"b\", \"c\" ]\n\nconvoStyle = array( 1 2 3 \"a\" \"b\" \"c\" )\n```\n\n### Math Operators\n\n#### add( ...values:any )\nAdds all arguments together and returns the result. Strings are concatenated. (a + b )\n\n#### sub( a:number b:number )\nSubtracts a from b and returns the result.  (a - b )\n\n#### sub( a:number b:number )\nMultiplies a and b and returns the result.  (a * b )\n\n#### div( a:number b:number )\nDivides a and b and returns the result.  (a / b )\n\n#### pow( a:number b:number )\nRaises a by b and returns the result.  Math.pow(a, b )\n\n#### inc( *a:number byValue?:number )\nIncrements the value of the given variable by 1 or the value of the second argument. ( a++ ) or ( a+= byValue )\n\n#### dec( *a:number byValue?:number )\nDecrements the value of the given variable by 1 or the value of the second argument. ( a-- ) or ( a-= byValue )\n\n### Logic Operators\n\n#### and( ...values: any )\nReturns true if all given arguments are truthy.\n\n*@@static*\n``` convo\n> do\n// true\nand( 1 )\n\n// false\nand( 0 )\n\n// true\nand( 1 2 )\n\n// false\nand( 0 1 )\n\n// true\nand( eq(1 1) eq(2 2) )\n\n// false\nand( eq(1 1) eq(2 1) )\n\n\n```\n\n#### or( ...values: any )\nReturns the first truthy value or the last non truthy value if no truthy values are given. If no\nvalues are given undefined is returned.\n\n*@@static*\n``` convo\n>do\n// 1\nor( 1 )\n\n// 0\nor( 0 )\n\n// 1\nor( 1 2 )\n\n// 2\nor( 0 2 )\n\n// true\nor( eq(1 1) eq(2 2) )\n\n// true\nor( eq(1 1) eq(2 1) )\n\n// false\nor( eq(1 3) eq(2 1) )\n\n```\n\n#### not( ...values: any )\nReturns true if all given arguments are falsy.\n\n*@@static*\n``` convo\n> do\n// false\nor( true )\n\n// true\nor( false )\n\n// false\nor( 1 )\n\n// true\nor( 0 )\n\n// false\nor( 1 2 )\n\n// false\nor( 0 1 )\n\n// true\nor( 0 false )\n\n// false\nor( eq(1 1))\n\n// true\nor( eq(1 2) )\n\n```\n\n#### gt( a:number b:number)\nReturns true if a is grater then b. ( a > b )\n\n#### gte( a:number b:number)\nReturns true if a is grater then or equal to b. ( a >= b )\n\n#### lt( a:number b:number)\nReturns true if a is less then b. ( a < b )\n\n#### lte( a:number b:number)\nReturns true if a is less then or equal to b. ( a <= b )\n\n### Control Flow\n\n#### if( condition:any ), elif( condition: any ), then( ...statements )\nIf condition is truthy then the statement directly after the if statement will be executed otherwise\nthe statement directly after if is skipped\n\n*@@static*\n``` convo\n> do\nage = 36\n\nif( gte( age 21 ) ) then (\n    print( \"You can buy beer in the US\" )\n) elif (lt( age 16 )) then(\n    print( \"You're not even close\" )\n) else (\n    print( '{{sub(21 age)}} years until you can buy beer in the US' )\n)\n\n```\n\n\n\n#### while( condition:any )\nWhile condition is truthy then the statement directly after the while statement will be executed\notherwise the statement directly after if is skipped and the while loop will exit.\n\n*@@static*\n``` convo\n> do\nlap = 0\n\nwhile( lt( lap 500 ) ) do (\n    print(\"go fast\")\n    print(\"turn left\")\n\n    // increment by 1\n    inc(lap)\n)\n\n```\n\n#### foreach( iterator:any )\nExecutes the next statement for each item returned by the passed in iterator.\n\n*@@static*\n``` convo\n> do\ntotal = 0\nforeach( num=in(array(1 2 3 4 )) ) do (\n    total = add( num total )\n)\n\n// 10\nprint(total)\n```\n\n#### in( value: array(any) )\nIterates of the values of an array\n\n\n#### break( ...values: any )\nBreaks out of loops either not arguments are passed or if any of the passed arguments are truthy\n\n*@@static*\n``` convo\n> do\nlap = 0\n\nwhile( true ) do (\n    print(\"go fast\")\n    print(\"turn left\")\n\n    // increment by 1\n    inc(lap)\n\n    if( eq( lap 500 ) ) then (\n        break()\n    )\n)\n```\n\n#### do( ...statements: any)\nExecutes all given statements and returns the value of the last statement. Do is commonly used with\nloop statements, but it can also be useful in other situations on its own such as doing inline\ncalculations. \n(note) The do keyword is also used to define top level statement when do is used as a message name.\n\n*@@static*\n``` convo\n> do\nn = 0\nwhile( lt( n 10 ) ) do (\n    // increment by 1\n    inc(lap)\n)\n\n// 22\nprint( add( 5 do(\n    sum = mul(n 2)\n    sum = sub( sum 3 )\n)) )\n\n```\n\n\n#### switch( value:any ...valueOrCase:any ), case( value:any ), test( condition:any ), default()\nSwitch can be used as either and switch statement or a ternary. When the switch function has exactly\n3 arguments and non of the is a case or default statement then switch acts as a ternary. \n\n*@@static*\n``` convo\n> do\n// can be 0 to 9\nvalue = rand(9)\n\n// can be 20 to 29\nvalue2 = add(20 rand(9))\n\n\nswitch(\n\n    // Sets the current match value of the switch. The match value of a switch statement can be\n    // changed further down the switch\n    value\n\n    case(0) print(\"Lowest\")\n\n    case(1) do(\n        print(\"Value is 1\")\n    )\n\n    case(2) do(\n        print(\"Number two\")\n    )\n\n    case(3) do(\n        print(\"Tree or three\")\n    )\n\n    // change the value to a value in ary\n    value2\n\n    case(20) do(\n        print(\"2 zero\")\n    )\n\n    test(lt(value2 28)) do(\n        print(\"less than 28\")\n    )\n\n    default() print(\"Fall back to default\")\n\n)\n\n\n// values matched by switches are returned and the value can be assigned to a variable\nstr = \"two\"\nvalue = switch(\n    str\n\n    case(\"one\") 1\n    case(\"two\") 2\n    case(\"three\") 3\n)\n\n// 2\nprint(value)\n\n\n// switches can also be used as a ternary\n\n// yes\nprint( switch(true \"yes\" \"no\") )\n\n// no\nprint( switch(false \"yes\" \"no\") )\n```\n\n#### return( value:any )\nReturns a value from the current function\n\n*@@static*\n``` convo\n\n> customMath(\n    a: number\n    b: number\n) -> (\n    return mul( add(a b) b )\n)\n\n> do\n\nvalue = customMath(a:4 b:3)\n\n// 21\nprint(value)\n\n```\n\n\n## Library Functions\nConvo-Lang defines a standard set of libraries for common coding needs.\n\n### now()\nReturns the current date time as a timestamp. now uses Date.now() to get the current timestamp.\n\n### dateTime( format?:string date?:string|number|Date )\nReturns the current or given date as a formatted string. The default value format string is\n\"yyyy-MM-dd'T'HH:mm:ssxxx\" which is an ISO 8601 date and results in formatted dates that look\nlike 2023-12-08T21:05:08-01:00. Invalid date formats will fallback to using the default date format.\nFormatting is done using date-fns - https://date-fns.org/v2.16.1/docs/format\n\n### sleep( milliseconds:number )\nSuspends execution for the given number of milliseconds\n\n### rand( max?:int )\nReturns a random number. Is the max parameters is passed then a random whole number with a\nmaximum of max will be returned otherwise a random number from 0 to 1 will be returned.\n\n### httpGet( url:string )\nPerforms an http GET request and returns the parsed JSON result. Results with a 404 status or a \nContent-Type not equal to application/json are returned as undefined.\n\n### httpGetString( url: string )\nPerforms an http GET request and returns the result as a string.\n\n### httpPost( url:string body:any )\nPerforms an http POST request and returns the parsed JSON result. Results with a 404 status or a \nContent-Type not equal to application/json are returned as undefined.\n\n### httpPatch( url:string body:any )\nPerforms an http PATCH request and returns the parsed JSON result. Results with a 404 status or a \nContent-Type not equal to application/json are returned as undefined.\n\n### httpPut( url:string body:any )\nPerforms an http PUT request and returns the parsed JSON result. Results with a 404 status or a \nContent-Type not equal to application/json are returned as undefined.\n\n### httpDelete( url:string )\nPerforms an http DELETE request and returns the parsed JSON result. Results with a 404 status or a \nContent-Type not equal to application/json are returned as undefined.\n\n### encodeURI( value:string )\nReturns the value encoded as an URI\n\n### encodeURIComponent( value:string )\nReturns the value encoded as an URI component\n\n### md( ...values:any[] )\nConcatenates all passed in values and formats the values as markdown. Recursive objects are limited\nto a depth of 5.\n\n### toMarkdown( maxDepth:int value:any)\nformats the value as markdown and allows the configuration of recursive object depth.\n\n### toJson( value:any )\nFormats the given value as json\n\n### toJsonMdBlock( value:any )\nFormats the given value as json and closes the value in a markdown json code block.\n\n### toJsonScheme( type:struct )\nPrints a struct as a JSON scheme.\n\n### toCsv( value:any[] )\nPrints an array of values a as CSV.\n\n### toCsvMdBlock\nPrints an array of values a as CSV inside of a markdown code block.\n\n### merge( ...values:any[] )\nMerges all passed in parameters into a single object. merge is similar to Javascript's spread operator.\n\n### html( ...values:any[] )\nReturns a string will all given values as escaped html. values are separated by a newline\n\n### xAtt( value:any )\nReturns the value as an attribute to be used with XML.\n\n### openBrowserWindow( url:string target:string='_blank' )\nOpens a new browser window\n\n``` convo\n> assistant\n<Component propName={{xAtt({prop1:'hello',prop2:77})}}>\n```\n\n## Convo-graph - beta\nConvo-graph is an advanced workflow system that defines workflows in the Convo-Lang syntax.\nConvo-graphs are often combined with custom UI renders to create interactive AI powered workflows.\n\nControls:\n- right click - Add node\n- right click + shift - Add edge\n- right click + cmd/ctrl - Add source\n- right click + alt/option - Add input\n- cmd/ctrl + scroll - zoom in/out\n- middle click and drag - pan\n\nClick the `run` button in the bottom left of any input node to trigger graph traversal.\n\n*@@convo-graph*\n``` convo\n@x 83\n@y 64\n@id i0\n@key orderInput\n@name Order Input\n> input\nHello I would like to order a large\ncheese pizza with and a bottle of\nCoke. \n\n> edge i0( x: 708 y: 114 id: \"e1\" ) ->  n0()\n\n\n@x 88\n@y 468\n@id i1\n@key customSupportInput\n@name Custom Support Input\n> input\nMy pizza was suppoed to be delivered\nan hour ago. I want a refund and\na free pizza\n\n> edge i1( x: 697 y: 493 id: \"e3\" ) ->  n0()\n\n\n> node router( x: 1228 y: 172 id: \"n0\" name: \"Router\" )\n\n    > step ( )\n\n        > categorize(\n            messageType:enum(\"order\" \"customer-support\" \"other\")\n        ) -> (\n            workflow.message=input\n            return( messageType)\n        )\n        \n        @call\n        > user\n        Categorize the following input:\n        \n        {{input}}\n\n\n\n> edge n0( x: 2135 y: 180 id: \"e2\" ) ->  n1 (\n    eq(input \"order\")\n)\n\n> node order( x: 2702 y: 96 id: \"n1\" name: \"Order Pizza\" )\n\n    > step ( )\n\n        > orderPizza(\n            size:enum(\"sm\" \"md\" \"lg\")\n            toppings:array(string)\n        )\n        \n        @call\n        > user\n        Order a pizza based on the following:\n        \n        {{workflow.message}}\n\n\n\n> edge n0( x: 2090 y: 557 id: \"e0\" ) ->  n2 (\n    eq(input \"customer-support\")\n)\n\n> node support( x: 2698 y: 820 id: \"n2\" name: \"Submit Ticket\" )\n\n    > step ( )\n\n        > submitSupportTicket(\n            issue:string\n            requestedSolution?:string\n        )\n        \n        @call\n        > user\n        Submit a support ticket based on the following:\n        \n        {{workflow.message}}\n```\n\n## Example Agents\n\n### Pizza Agent\n\nBelow is an example of creating an agent named Willy that will help a user order a pizza.\n``` convo\n// define is a top level statement and is being used to define \n> define\nagentName=\"Willy\"\npizzaToppings=[]\npizzaSize=null\n\n// The system message instructs the agent how to behave and informs the agent about the\n// current state of the pizza being ordered.\n@edge\n> system\nYour name is {{agentName}} and you're helping a user order a pizza. The pizza can have at most 5\ntoppings\n\nPizza Size: {{or(pizzaSize \"Not set\")}}\nPizza Toppings:\n{{pizzaToppings}}\n\n> addTopping(\n    topping:string\n) -> (\n    pizzaToppings=aryAdd(pizzaToppings topping)\n)\n\n> removeTopping(\n    topping:string\n) -> (\n    pizzaToppings=aryRemove(pizzaToppings topping)\n)\n\n> setSize(\n    # sm = Small\n    # md = Medium\n    # lg = Large\n    size:enum(\"sm\" \"md\" \"lg\")\n) -> (\n    pizzaSize=size\n)\n\n# Before placing the order the user must pick a size and add at least 1 topping\n> placeOrder() -> (\n    if( not(pizzaSize) ) return('Error: Pizza Size required')\n    if( not(pizzaToppings.length) ) return('Error: At least 1 topping required')\n\n    return('Order successful')\n)\n\n\n> assistant\nHello, my name is {{agentName}}. How can I help you today\n\n@suggestion\n> assistant\nlarge pepperoni pizza\n\n@suggestion\n> assistant\nmedium pizza with anchovies and sausage\n\n@suggestion\n> assistant\nlarge pizza with chicken and bacon\n\n> user\nI want a pizza with bacon, onions and sausage\n\n```\n\n### Sandwich Assistant\n``` convo\n> define\n// We use a define top level statement to define the agents name\n> define\nname=\"Ricky\"\n\n// The system message informs the LLM how to behave\n> system\nYour name is {{name}} and you are taking an order for a sandwich. User can order from the following menu.\nThe user can not customize their order, this is not Burger King, they can't have it their way.\n\n<menu>\n- Ham Sandwich - $7.50\n- Turkey Sandwich - $7.50\n</menu>\n\n// The order function below can be called by the LLM when a user ask to order a sandwitch\n// The (#) documenting comments tell the LLM how to use the function\n\n# Orders a sandwich for the user\n> order(\n    # name of the sandwich to order\n    sandwich:string\n    price:number\n)\n\n// The assistant message greets the user\n> assistant\nHello, I'm {{name}}. How can I take your order?\n\n// The next 2 messages use the @suggestion tag to display clickable suggessions to the user\n@suggestion\n> assistant\nHam Sandwich\n\n@suggestion\n> assistant\nTurkey Sandwich\n\n// The user message tells the LLM what they want to order\n> user\nI'll take a Ham Sandwich please\n\n\n\n```\n",
    "learn_convo_lang_md_html": "<h1>Convo-Lang.</h1>\n<p>Convo-Lang is a programming language built from the ground up for prompt engineers and AI application\ndevelopers. The goal of Convo-Lang is to simplify to development of LLM based applications and\nprovided a uniform syntax for working with all LLMs.</p>\n<p>Convo-Lang can be used in Javascript, Python, from the command line or directly in VSCode via the\nConvo-Lang extension. The core of Convo-Lang consists of 2 parts, the Convo-Lang language and the\nConversation Engine.</p>\n<p>The <strong>Convo-Lang</strong> language or just simply &quot;Convo-Lang&quot;, is used to write prompts in a structured\nlanguage that can be interchangeably used with different LLMs.</p>\n<p>The <strong>Conversation Engine</strong> is a code interpreter that executes scripts written in the\nConvo-Lang language. It handles passing messages between users and LLMs and manages all the lower\nlevel details of working with an LLM such as implementing the usages of tools.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; system\nYou are a prompt engineer learning Convo-Lang. Prompting will never be the same 🥹\n</code></pre>\n<h2>Why Convo-Lang</h2>\n<p>Q. Why do we need another programming language when LLMs understand English?</p>\n<p>A. Well, The short answer is there's more to prompting than you may think.</p>\n<p>When using applications like ChatGTP, Grok or Gemini prompting typically involves writing a message\nor series of messages and sending them to an LLM and getting a response. This type of free form\ninteraction with an LLM can be very useful in many situations and requires nothing more than the\nuse of english. But the nature of this type of unstructured and unguided conversation does fit well\ninside the setting of a purposeful application.</p>\n<p>When building AI powered (agentic) applications more structure is needed.\nThe prompts that help power agentic applications need the ability to define the behavior,\npersonality and knowledge of their agents. They need to be able to expression both sides of a\nconversation, both the user and agent. And they need to be able to define how agents connect\nto the outside world when using tools. This is why we need a new programming language (Convo-Lang).</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; system\nPersonality, Behavior, Knowledge\n\n&gt; extern connectToReality(command:string)\n\n&gt; assistant\nWelcome to Convo-Lang 🥳\n\n&gt; user\nThis is amazing 🤩\n</code></pre>\n<h2>A Quick Comparison</h2>\n<p>To demonstrate some of the advantages of Convo-Lang we will take a look at the same prompt in\nboth the OpenAI standard and in Convo-Lang. The prompt instructs an agent to act as a funny dude\nand to always respond to the user with a joke and if the user likes a joke to call the likeJoke function.</p>\n<p>OpenAI Standard:</p>\n<pre><code class=\"language-json\">{\n    &quot;model&quot;: &quot;gpt-4o&quot;,\n    &quot;messages&quot;: [\n        {\n            &quot;role&quot;: &quot;system&quot;,\n            &quot;content&quot;: &quot;You are a funny dude. respond to all messages with a joke regardless of the situation.\\n\\nIf a user says that they like one of your jokes call the like Joke function&quot;\n        },\n        {\n            &quot;role&quot;: &quot;assistant&quot;,\n            &quot;content&quot;: &quot;How can I make you laugh today 🤓&quot;\n        }\n    ],\n    &quot;tools&quot;: [\n        {\n            &quot;type&quot;: &quot;function&quot;,\n            &quot;function&quot;: {\n                &quot;name&quot;: &quot;likeJoke&quot;,\n                &quot;description&quot;: &quot;Call when the user likes a joke&quot;,\n                &quot;parameters&quot;: {\n                    &quot;type&quot;: &quot;object&quot;,\n                    &quot;required&quot;: [\n                        &quot;joke&quot;\n                    ],\n                    &quot;properties&quot;: {\n                        &quot;joke&quot;: {\n                            &quot;type&quot;: &quot;string&quot;,\n                            &quot;description&quot;: &quot;The joke the user liked&quot;\n                        },\n                        &quot;reason&quot;: {\n                            &quot;type&quot;: &quot;string&quot;,\n                            &quot;description&quot;: &quot;The reason they liked the joke&quot;\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n</code></pre>\n<p>Convo-Lang:\n<em>@@static</em></p>\n<pre><code class=\"language-convo\"># Call when the user likes a joke\n&gt; likeJoke(\n    # The joke the user liked\n    joke:string\n    # The reason they liked the joke\n    reason?:string\n) -&gt; (\n    httpPost(&quot;https://funny-jokes.com/api/like&quot; __args)\n)\n\n&gt; system\nYou are a funny dude. respond to all messages with a joke regardless of the situation.\n\nIf a user says that they like one of your jokes call the like Joke function\n\n&gt; assistant\nHow can I make you laugh today 🤓\n</code></pre>\n<p>You can decide which version you prefer, but it's pretty obvious which one is easier to read. And\nas an added bonus the Convo-Lang version even handles making the HTTP request to submit the liked\njoke, this is completely out of the scope of the OpenAI standard and requires a non-trivial\namount of additional code when not using Convo-Lang.</p>\n<h2>How does it work?</h2>\n<p>Convo-Lang is much more than just a pretty way to format prompts, it's a full programming\nlanguage and runtime. At a high level, Convo-Lang scripts are executed on a\nclient device and the output of the script is used to create prompts in the format\nof the LLM, then the converted prompt are sent to the LLM. This process of execution and conversion\nallows Convo-Lang to work with any LLM that an adaptor can be written for and allows Convo-Lang to\nadd enhanced capabilities to an LLM without needed to make any changes to the model itself.</p>\n<p>Convo-Lang execution flow:</p>\n<p><img src=\"https://github.com/convo-lang/convo-lang/blob/main/assets/convo-lang-execution-flow.png?raw=true\" alt=\"1. Parse Convo-Lang script. The parsed script results in a collection of message objects.\n2. Load parsed messages objects into a Conversation context. The Conversation context contains message, variables, callbacks for tools and more.\n3. Wait for user input or continue if explicitly instructed\n4. Evaluate and flatten the messages of the conversation. When a message is flatten any dynamic expressions in the message are evaluated and the resulting flatten message is a static string.\n5. Send flattened messages an LLM adapter. LLM adapters handle the sending of messages to an LLM in the format expected by the LLM.\n6. LLM adapter converts flattened messages into the format required by its target LLM.\n7. Messages are sent to the LLM.\n8. LLM sends back a response.\n9. The LLM adapter converts the response messages to a collection of ConvoCompletionMessage objects which is usable by the Conversation context.\n10. The LLM adapter sends the ConvoCompletionMessage objects to the Conversation context.\n11. The Conversation context appends the new messages to the conversation.\n12. If no tool calls are required return to step 3 otherwise continue\n13. Requested tool / function is invoked and its return value is appended to the conversation as a message. The actual code that gets ran can either be external code such as JavaScript or Python or can be Convo-Lang executional statements.\n14. The return value message is sent to the LLM using an LLM adapter using steps 5 - 11.\n15. The LLM returns a response message based on the return value message\n16. Return to step 3\"></p>\n<h1>Learning Time.</h1>\n<p>Now that you have have a basic understanding of how Convo-Lang works its time to start your\njourney with the language and learn its ways 🥷. The following Convo-Lang tutorial is full of\ninteractive snippets. We encourage you to try them all, the best way to learn is to do.</p>\n<h2>Doc</h2>\n<p>Meet Doc, your personal assistant on your journey into the world of Convo-Lang. Ask Doc any questions\nyou have about Convo-Lang and he will give you a hand. You can use the &quot;Ask the Doc&quot; chat box at the\ntop of the screen at anytime during this tutorial.</p>\n<p>Below is the Convo-Lang script for Doc. By the end of this tutorial you will be able to write your own\nskilled agent similar to Doc and more.</p>\n<p><em>@@convo-source agent-doc</em></p>\n<pre><code class=\"language-convo\">&gt; define\nlangName=&quot;Convo-Lang&quot;\n\n&gt; system\nYou are teaching a prompt engineer a really cool \nand existing programming language called {{langName}}\n\n&lt;about-convo-lang&gt;\n{{staticContent.learn_convo_lang_md}}\n&lt;/about-convo-lang&gt;\n\nAny time you would need to respond with an answer that\nwould required a markdown style code fence containing\nConvo-Lang call the showExample function.\n\n# Shows an example Convo-Lang script. Do not repeat\n# the example script in your next response and do not\n# tell the user you have shown them the example,\n# they will see it.\n&gt; extern showExample(\n    # Name of the example in kebab-case\n    name:string\n    # The example Convo-Lang script. Do not inclose\n    # any of the script in code markdown style\n    # code fences using (```)\n    convoScript:string\n)\n\n&gt; assistant\nHi 👋, I'm Doc\n\n&gt; assistant\nI'm here to help you learn {{langName}}.\n\n&gt; assistant\nAll of the example {{langName}} code example are \ninteractive. I recommend trying out all of the \nexamples for your self. It is the best way to learn.\n\n@suggestionTitle Common questions\n@suggestion\n&gt; assistant\nWhat is {{langName}}\n\n@suggestion\n&gt; assistant\nHow do functions work\n\n@suggestion\n&gt; assistant\nHow do I call a javascript function from {{langName}}\n\n@suggestion\n&gt; assistant\nWhat are tags\n\n@suggestion\n&gt; assistant\nWhat do you use variables\n</code></pre>\n<p>Doc is purely written in Convo-Lang and uses the document you are reading right now as his knowledge\nbase in combination with a few functions in integrate into the Convo-Lang website. Doc is a great\nexample of what can be done with Convo-Lang.</p>\n<h2>Summary</h2>\n<h2>Conversations</h2>\n<p>At the heart of Convo-Lang are Conversations. A Conversation is a collection\nof messages. Messages can either contain textual content, multi-modal content\nor executable statements.</p>\n<p>Conversations are managed by the Conversation Engine, which is a code interpreter\nthat interpreters Convo-Lang scripts. It handles all of the complexities of sending messages between\na user and an LLM, executing tool use / calling function and manages the internal state of a Conversation.</p>\n<p>Convo-Lang scripts are conversations written in the Convo-Lang syntax and stored in a file or memory.\nWhen integrating Convo-Lang into an application you will often store Convo-Lang scripts in strings\nthat are then passed to the Conversation Engine.</p>\n<p>Here is a simple example of a Convo-Lang script.</p>\n<pre><code class=\"language-convo\">&gt; define\nname=&quot;Jeff&quot;\n\n&gt; assistant\nHello, I'm {{name}} 🥸. What can I help you with?\n\n&gt; user\nWhat are the names of the planets in our solar system\n\n\n&gt; assistant\nThe planets in our solar system, in order from\nclosest to the Sun to farthest, are:\n\n1. Mercury\n2. Venus\n3. Earth\n4. Mars\n5. Jupiter\n6. Saturn\n7. Uranus\n8. Neptune\n\nAdditionally, there are also dwarf planets,\nwith Pluto being the most well-known among them.\n\n&gt; user\nThank you\n\n&gt; assistant\nYou're welcome! If you have any more questions,\nfeel free to ask.\n\n\n\n\n</code></pre>\n<h2>Integration</h2>\n<p>Convo-Lang can be integrated into any TypeScript/JavaScript or Python application. We won't go into\ndepth about how to integrate Convo-Lang into an application here, as we are mainly focused on learning\nthe Convo-Lang language in this document. Below are a couple of quick start guide and links to more\ninformation about integration.</p>\n<h3>TypeScript/Javascript Integration</h3>\n<p>The follow NPM packages are available for TypeScript/JavaScript integration</p>\n<ul>\n<li>@convo-lang/convo-lang - Contains the Convo-Lang Conversation Engine, and a Typescript/Javascript library to use Convo-Lang in your application.</li>\n<li>@convo-lang/convo-lang-react - Contains UI pre-built UI components including a fully functional chat component.</li>\n<li>@convo-lang/convo-lang-api-routes - A backend for relaying messages between the browser and LLM backends such as OpenAI.</li>\n<li>@convo-lang/convo-vfs - Used to integrate Convo-Lang into virtual file systems.</li>\n<li>@convo-lang/convo-lang-cli - A CLI interface that allows you to execute and parse convo-lang files.</li>\n<li>@convo-lang/convo-lang-tools - Contains the convo-lang vscode extension, which includes syntax highlighting,\nin-editor script execution, script parsing, and other helpful tools for working with convo-lang.\nIn most cases, you will not install this package but instead install the vscode convo-lang extension.</li>\n</ul>\n<h3>VSCode Extension</h3>\n<p>To help you develop Convo-Lang application faster and easier we provide a VSCode extension that gives\nyou Convo-Lang syntax highlighting and allows you to execute Convo-Lang scripts directly in VSCode.</p>\n<p>You can install the vscode extension by searching for &quot;convo-lang&quot; in the vscode extension tab.</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools\">https://marketplace.visualstudio.com/items?itemName=IYIO.convo-lang-tools</a></p>\n<h3>Python Integration</h3>\n<p><strong>Coming Soon</strong></p>\n<h2>Language Basics</h2>\n<p>Convo-Lang consists of a few simple building blocks, Content Message, Functions, Top Level Statements,\nVariables, Tags and Comments. By combining these building blocks Convo-Lang allows you to create\ninteractive, multi-modal conversations between humans and LLMs. These conversations.</p>\n<ul>\n<li>Content Message - Textual and multi-modal messages shared between humans and LLMs</li>\n<li>Comments - There are 2 type of comments in Convo-Lang, Document Comment and Coding Comments\n<ul>\n<li>Documenting Comments - Used to document functions and data structures for LLMs. Documenting Comments start with a (<code>#</code>) character .</li>\n<li>Coding Comments - Used to level comments about code or messages. LLMs are not aware of coding comments. Coding Comments start the (<code>//</code>)</li>\n</ul>\n</li>\n<li>Top Level Statements - Blocks of executable statements that can define variables, data structures and execute arbitrary code</li>\n<li>Variables - Variables store well define state information in a conversation</li>\n<li>Functions - Functions or &quot;Tools&quot; that can be used by LLMs or other code in a conversation</li>\n<li>Tags - Used to attach metadata to messages, functions and statements</li>\n</ul>\n<p><strong>Content Messages:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; system\nThis is a system message used to control the\nbehaviour of an LLM\n\n&gt; assistant\nThis is an assistant message sent from the LLM\n\n&gt; user\nThis is a user message sent form the user\n</code></pre>\n<p><br>\n<strong>Comments:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">// this is a coding comment and will not be visible to the LLM\n\n# This is a documenting comment and will document the message or statement that follows it\n</code></pre>\n<p><br>\n<strong>Top Level Statements:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; define\n// We can define variables and data structures here\n</code></pre>\n<p><br>\n<strong>Variables:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; define\n// This is a variable named username\nusername=&quot;Max&quot;\n\n// We can now insert the username variable in the following message using a dynamic expression\n&gt; assistant\nHi, my name is {{username}}\n</code></pre>\n<p><br>\n<strong>Functions:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">// Below is a function an LLM can call. Functions can also define a body containing code statements.\n\n# Opens a page of a PDF by page number\n&gt; gotoPage(\n    # The page number to goto\n    pageNumber:number\n)\n</code></pre>\n<p><br>\n<strong>Tags:</strong>\n<em>@@static</em></p>\n<pre><code class=\"language-convo\">// The @suggestion tag displays a suggestions to the user\n@suggestion\n&gt; assistant\nThis is a suggestion message\n</code></pre>\n<h2>Content Messages</h2>\n<p>Content message represent textual and multi-modal messages shared between an LLM and a user.</p>\n<p>Below is an example of a clown telling a jokes to a user.</p>\n<pre><code class=\"language-convo\">&gt; system\nYou are a funny clown name Bido telling jokes\nto young kids. Respond to all messages with\na circus joke.\n\nWhen you tell a joke first ask the user a question\nin one message then deliver the punch line after\nthey respond.\n\n&gt; assistant\nHi, I'm Bido. I can tell you a joke about anything.\n\n&gt; user\nI think cats secretly rule the world.\n\n&gt; assistant\nWhy did the circus lion eat a tightrope walker?\n\n&gt; user\nI dont know\n\n&gt; assistant\nBecause he wanted a well-balanced meal!\n</code></pre>\n<p>This example used 3 different types of messages: <code>system</code>, <code>assistant</code> and <code>user</code> which are all content\nmessages. The <code>system</code> message defines the behaviour of the LLM and is hidden from the user in the\nchat window, the <code>assistant</code> messages represent the message sent by the LLM and the <code>user</code> messages\nrepresent the message sent by the user.</p>\n<h3>Dynamic Expressions</h3>\n<p>Content messages can also contain dynamic expressions. Dynamic expressions are small pieces of\nConvo-code surrounded in double curly brackets - <code>{{ add( 1 2) }}</code></p>\n<p>Below is an example of inserting the current date and time into a system message to allow the LLM to\nknow what the date and time it is.</p>\n<pre><code class=\"language-convo\">&gt; system\nThe current date and time is {{dateTime()}}\n\n&gt; user\nWhat time is it.\n\n&gt; assistant\nIt is currently 4:20 pm\n</code></pre>\n<h2>Comments</h2>\n<p>There are 2 types of comments in Convo-Lang: documenting comments and non-documenting comments.</p>\n<p>Documenting comments begin with the <code>#</code> character and continue to the end of the line the comment is\nwritten on. Documenting comments are relayed to the LLM and help inform the LLM. For example a\ndocumenting comment can be added to a function to instruct the LLM on how to use the function.</p>\n<p>Non-documenting comments begin with <code>//</code> and also continue to the end of the line the comment is\nwritten on. Non-documenting comments are not relayed to the LLM and are meant to store developer\ncomments</p>\n<pre><code class=\"language-convo\">&gt; define\n# A vehicle used to make deliveries.\n# Personal use is prohibited.\nDeliveryVehicle = struct(\n    # A fun nice name for the vehicle\n    nickname:string\n    # A range from 0 to 1\n    fuelLevel:number\n)\n\n// add more vehicles later\nsuperVan=new(DeliveryVehicle {\n    nickname:&quot;Betty&quot;\n    fuelLevel:0.8\n})\n\n// myFunction is a poorly named function, but \n// documenting comments should help\n\n# Places an online order for a pizza\n&gt; myFunction(\n\n    # Name of the pizza to order\n    arg1: string\n\n    # Number of pizzas to order\n    arg2: number\n)\n\n&gt; user\nOrder 200 peperoni pizzas\n\n@toolId call_kjFS4sxrL1lxdZ9V528bgTWY\n&gt; call myFunction(\n    &quot;arg1&quot;: &quot;pepperoni&quot;,\n    &quot;arg2&quot;: 200\n)\n&gt; result\n__return={\n    &quot;arg1&quot;: &quot;pepperoni&quot;,\n    &quot;arg2&quot;: 200\n}\n\n&gt; assistant\nI have placed an order for 200 pepperoni pizzas.\n</code></pre>\n<p>As you can see, even though the function to order pizzas was named myFunction the LLM was able to\ncall myFunction to order the pizzas since the documenting comments informed the LLM what the\nfunction is used for and what the arguments of the function are used for.</p>\n<h2>Top Level Statement Messages</h2>\n<p>Top level statements are used to define variables and data structures and execute Convo-code.\nThere are 4 types of top level statement messages. In most cases you will use <code>define</code> or <code>do</code>.</p>\n<ul>\n<li><code>define</code> - Used to define variables and types. Code written in a define message have a limited set of functions they can call.</li>\n<li><code>do</code> - Used to define variables and execute statements.</li>\n<li><code>debug</code> - Used to write debug information. In most cases, you will not directly create debug messages.</li>\n<li><code>end</code> - Explicitly ends a message and can be used to set variables related to the ended message.</li>\n</ul>\n<p><code>define</code> and <code>do</code> both allow you to write Convo-code that is executed at runtime.\nThe only difference between them is that <code>define</code> limits the types of functions that can be called\nand is intended to contain code that can be statically analyzed and has no side-effects at runtime.</p>\n<p>Below is an example of creating an agent named Ricky. The <code>define</code> and <code>do</code> top level statements\ndefine variable that are inserted into content messages using dynamic expressions.</p>\n<pre><code class=\"language-convo\">&gt; define\n\nHobby = struct(\n    name: string\n    annualBudget: number\n)\n\nname='Ricky'\nage=38\nprofession='Race car driver'\naction='Go Fast!'\naboutUrl='/example/ricky.md'\nhobby=new(Hobby {\n    name: &quot;Deep sea diving&quot;\n    annualBudget: 30000\n})\n\n&gt; do\nabout=httpGetString(aboutUrl)\n\n&gt; system\nYour name is {{name}}. You are {{age}} years old\nand you're a {{profession}}.\n\nUse the following information to answers questions.\n&lt;about-you&gt;\n{{about}}\n&lt;about-you&gt;\n\nYour favorite hobby:\n&lt;favorite-hobby&gt;\n{{hobby}}\n&lt;/favorite-hobby&gt;\n\n&gt; assistant\nHi, my name is {{name}}. Are you ready to {{action}}\n</code></pre>\n<p>As you can see the <code>define</code> message defines several variables about the persona we want the agent\nto have. We also defined a <code>struct</code> to describe the properties of a hobby. We will learn\nmore about data structure later on. All of the code in the <code>define</code> message contains static\nvalues that will have no side-effects at runtime and will not change regardless of when and\nwhere the prompt is executed. In the <code>do</code> message we load a markdown file over HTTP and since the\nloading data over the network has non-deterministic behavior the <code>httpGetString</code> function must be\ncalled from within a <code>do</code> message.</p>\n<h2>Variables</h2>\n<p>Variables allow you to store state information about a conversation in named variables and\ncan be defined directly in Convo-Lang or injected from external sources. Using variables allows\nyou to create prompt template and avoid purely relying on the memory of an LLM to keep track of\nimportant information. Variables must always start with a lowercase letter.</p>\n<h3>Variable Types</h3>\n<p>Convo-Lang defines a set of built-in primitive types, strings, arrays, enums and custom data structures.\nStrings are enclosed in pairs of single or double quotes. Variables are dynamically typed so they\ncan be assigned to any variable type at any time.</p>\n<p><code>string</code> - A series of characters enclosed in either single or double quotes. <a href=\"#strings\">read more</a></p>\n<p><code>number</code> - Floating point number</p>\n<p><code>int</code> - Integer</p>\n<p><code>time</code> - Integer timestamp</p>\n<p><code>boolean</code> - Boolean or a true / value value</p>\n<p><code>any</code> - A type that can be assigned any value</p>\n<p><code>null</code> - Null constant</p>\n<p><code>undefined</code> - Undefined constant</p>\n<p><code>enum</code> - A restricted set of strings or numbers. <a href=\"#enums\">read more</a></p>\n<p><code>array</code> -  An array of values. <a href=\"#arrays\">read more</a></p>\n<p><code>map</code> - An object with key value pairs</p>\n<p><code>struct</code> - A custom data structure. <a href=\"#structures\">read more</a></p>\n<p>Below is an example different variable types</p>\n<pre><code class=\"language-convo\">&gt; define\n\nintVar=123\nfloatingPointVar=1.23\n\n// now() returns the current date and \n// time as a timestamp\ntimeVar=now()\n\n// booleans can be true or false\ntrueVar=true\nfalseVar=false\n\nnullVar=null\n\nundefinedVar=undefined\n\n// The value of intVar will be inserted into\n// the string at runtime\nsingleQVar='value - {{intVar}}'\n\n// The value of intVar will not be inserted\ndoubleQVar=&quot;value - {{intVar}}&quot;\n\n// The array will have a value of 1, 2, true\narrayVar=array(1 2 intVar trueVar)\n\nPetType=enum(&quot;cat&quot; &quot;dog&quot; &quot;fish&quot; &quot;bird&quot;)\n\nPet=struct(\n    name:string\n    type:PetType\n    attributes:object\n)\n\npet=new(Pet {\n    name:&quot;Mini&quot;\n    type:&quot;bird&quot;\n    attributes:{\n        color:'blue'\n        age:6\n    }\n})\n\n&gt; assistant\nintVar: {{intVar}}\nfloatingPointVar: {{floatingPointVar}}\ntimeVar: {{timeVar}}\ntrueVar: {{trueVar}}\nfalseVar: {{falseVar}}\nnullVar: {{nullVar}}\nundefinedVar: {{undefinedVar}}\nsingleQVar: {{singleQVar}}\ndoubleQVar: {{doubleQVar}}\n\narrayVar:\n{{arrayVar}}\n\npet:\n{{pet}}\n\n</code></pre>\n<h3>Variable Scope</h3>\n<p>Variables live either in the global scope of a conversation or in the local scope of a function.\nVariables define in global scope can be inserted into content messages using dynamic expressions.</p>\n<pre><code class=\"language-convo\">&gt; define\n// This variable is defined in global scope\nstoreLocation=&quot;Cincinnati&quot;\n\n&gt; orderFood(food:string) -&gt; (\n    // food and order time are both defined in the \n    // local variable scope of the orderFood function.\n    orderTime=dateTime()\n\n    // Here we print out a summary of the order \n    // including the storeLocation which comes from\n    // the global scope\n    print('Order: time:{{orderTime}}] location:{{storeLocation}} - {{food}}')\n\n    return('Success')\n)\n\n// The storeLocation variable is accessed from global \n// scope and inserted into the assistant message.\n&gt; assistant\nWelcome to the {{storeLocation}} Crabby Patty\n</code></pre>\n<h3>Variable Assignment Order</h3>\n<p>Depending on where at in a conversation a variable is accessed it can have different values, this\nis because variable assignment only effects messages following the assignment.</p>\n<pre><code class=\"language-convo\">&gt; define\nbottleCount=99\n\n&gt; assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. Now take one down and pass it around.\n\n&gt; define\nbottleCount=98\n\n&gt; assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. Now take one down and pass it around.\n\n&gt; define\nbottleCount=97\n\n&gt; assistant\nThere are {{bottleCount}} bottles of beer on the\nwall. I see a cycle of alcohol abuse forming.\n\n</code></pre>\n<p>As you can see each message says there is a different number of bottles of beer on the wall and this\nis because each message is only effected by the assignments the come before them.</p>\n<p><strong>There is one exception</strong> to the rules of variable assignment order. When a messages is tagged with\nthe <code>@edge</code> tag it is considered an <a href=\"#edge-messages\">Edge Message</a>. Edge messages are always evaluated at\nthe end of a conversation. They are most often used to injected the most update value of variables\ninto system messages. We will learn more about Edge Messages later in this tutorial.</p>\n<h3>System Variables</h3>\n<p>System variables are used to control the configuration of a conversation at run time through\nvariable assignment. All system variables start with a double underscore <code>__</code> and using a double\nunderscore for user defined variables is prohibited.</p>\n<p><code>__args</code> - A reference to the parameters passed the the current function as any object.</p>\n<p><code>__return</code> - A reference to the last return value of a function called by a call message</p>\n<p><code>__error</code> - A reference to the last error</p>\n<p><code>__cwd</code> - In environments that have access to the filesystem __cwd defines the current working directory.</p>\n<p><code>__debug</code> - When set to true debugging information will be added to conversations.</p>\n<p><code>__model</code> - Sets the default model</p>\n<p><code>__endpoint</code> - Sets the default completion endpoint</p>\n<p><code>__userId</code> - Sets the default user id of the conversation</p>\n<p><code>__trackTime</code> - When set to true time tracking will be enabled.</p>\n<p><code>__trackTokenUsage</code> - When set to true token usage tracking will be enabled.</p>\n<p><code>__trackModel</code> - When set to true the model used as a completion provider will be tracked.</p>\n<p><code>__visionSystemMessage</code> - When defined __visionSystemMessage will be injected into the system message of conversations with vision capabilities. __visionSystemMessage will override the default vision system message.</p>\n<p><code>__visionServiceSystemMessage</code> - The default system message used for completing vision requests. Vision requests are typically completed in a separate conversation that supports vision messages. By default the system message of the conversation that triggered the vision request will be used.</p>\n<p><code>__defaultVisionResponse</code> - Response used with the system is not able to generate a vision response.</p>\n<p><code>__md</code> - A reference to markdown vars.</p>\n<p><code>__rag</code> - Enables retrieval augmented generation (RAG). The value of the __rag can either be true, false or a number. The value indicates the number of rag results that should be sent to the LLM by default all rag message will be sent to the LLM. When setting the number of rag messages to a fixed number only the last N number of rag messages will be sent to the LLM. Setting __rag to a fixed number can help to reduce prompt size.</p>\n<p><code>__ragParams</code> - object it is ignored.</p>\n<p><code>__ragTol</code> - The tolerance that determines if matched rag content should be included as contact.</p>\n<p><code>__sceneCtrl</code> - A reference to a SceneCtrl that is capable of describing the current user interface as a scene the user is viewing.</p>\n<p><code>__lastDescribedScene</code> - The last described scene added to the conversation</p>\n<p><code>__voice</code> - Used by agents to define their voice</p>\n<h2>Functions</h2>\n<p>Function messages define functions ( also known as tools ) that LLMs can call at runtime. Function\nmessages start with a <code>&gt;</code> character followed by an optional modifier, identifier, 0 or more arguments\nand an optional function body. A function's body contains Convo-code the is executed by the\nConversation Engine. If a function does not define a body it will return the arguments\nit is given as and object with key value paris matching the names an values of arguments passed.</p>\n<p>Below is an example of an LLM using a <code>addNumbers</code> function to add numbers together.</p>\n<pre><code class=\"language-convo\"># Adds 2 numbers together\n&gt; addNumbers(\n    a: number\n    b: number\n) -&gt; (\n    return( add( a b ) )\n)\n\n&gt; user\nWhat is 2 plus 2\n\n\n@toolId call_eG2MksnUMczGCjoKsY8AMh0f\n&gt; call addNumbers(\n    &quot;a&quot;: 2,\n    &quot;b&quot;: 2\n)\n&gt; result\n__return=4\n\n\n&gt; assistant\n2 plus 2 equals 4.\n</code></pre>\n<p>After the user asked what 2 plus 2 is the LLM called the <code>addNumbers</code> function using a function\n<code>call</code> message. Function call messages define the name of a function to call and the arguments\nto pass to the function. After the addNumbers function is called its return value is written as\na <code>result</code> message and stores the return value in the <code>__return</code> variable. Following the <code>result</code>\nmessage the LLM responds with a content message giving the result to the user in plain english.</p>\n<h3>Extern Functions</h3>\n<p>Extern function allow you do define functions in other languages that are call by the the Conversation Engine\nThis allows Convo-Lang to integrate into existing systems and offload complex logic to more traditional programming languages</p>\n<p>Below is an example of an agent setting the color of an SVG shape based on input from the user</p>\n<p><strong>Extern function written in javascript:</strong>\n<em>@@export</em></p>\n<pre><code class=\"language-js\">export function setShapeColor(shape,color){\n    const svgShape=document.querySelector(`#example-color-shapes .shape-${shape}`);\n    if(svgShape){\n        svgShape.setAttribute('fill',color);\n        return 'Color set';\n    }else{\n        return 'Unable to find shape';\n    }\n}\n</code></pre>\n<p><strong>SVG:</strong></p>\n<pre><code class=\"language-html\">&lt;svg id=&quot;example-color-shapes&quot; width=&quot;300&quot; height=&quot;100&quot; viewBox=&quot;0 0 300 100&quot;&gt;\n    &lt;circle class=&quot;shape-circle&quot; cx=&quot;56.6176&quot; cy=&quot;50&quot; r=&quot;35&quot; fill=&quot;red&quot;/&gt;\n    &lt;path class=&quot;shape-triangle&quot; d=&quot;M144 17L182 82H107L144 17Z&quot; fill=&quot;blue&quot;/&gt;\n    &lt;rect class=&quot;shape-square&quot; x=&quot;208.382&quot; y=&quot;17.4706&quot; width=&quot;70&quot; height=&quot;70&quot; fill=&quot;green&quot;/&gt;\n&lt;/svg&gt;\n</code></pre>\n<p><em>@@render</em></p>\n<pre><code class=\"language-html\">&lt;svg id=&quot;example-color-shapes&quot; width=&quot;300&quot; height=&quot;100&quot; viewBox=&quot;0 0 300 100&quot;&gt;\n    &lt;circle class=&quot;shape-circle&quot; cx=&quot;56.6176&quot; cy=&quot;50&quot; r=&quot;35&quot; fill=&quot;red&quot;/&gt;\n    &lt;path class=&quot;shape-triangle&quot; d=&quot;M144 17L182 82H107L144 17Z&quot; fill=&quot;orange&quot;/&gt;\n    &lt;rect class=&quot;shape-square&quot; x=&quot;208.382&quot; y=&quot;17.4706&quot; width=&quot;70&quot; height=&quot;70&quot; fill=&quot;green&quot;/&gt;\n&lt;/svg&gt;\n</code></pre>\n<p><em>@@load shapeColor</em></p>\n<pre><code class=\"language-convo\"># Sets the color of a shape\n&gt; extern setShapeColor(\n\n    # The shape to set the color of\n    shape:enum( &quot;circle&quot; &quot;triangle&quot; &quot;square&quot; )\n\n    # A hex color to set the shape to\n    color:string;\n)\n\n&gt; user\nChange the color of the triangle to orange\n\n@toolId call_vWZpLFZr2IiHWE30deg4ckGw\n&gt; call setShapeColor(\n    &quot;shape&quot;: &quot;triangle&quot;\n    &quot;color&quot;: &quot;orange&quot;\n)\n&gt; result\n__return=&quot;Color set&quot;\n\n\n&gt; assistant\nThe color of the triangle has been set to orange\n\n</code></pre>\n<h2>Tags</h2>\n<p>Tags are used in many ways in Convo-Lang and serve as a way to add metadata to messages and\ncode statements. Tags on the line just before the message or code statement they are tagging. Tags\nstart with the <code>@</code> character followed by the name of the tag and optionally a value for the tag\nseparated from it's name with a space character - <code>@tagName tagValue</code>.</p>\n<p>The following show the use of several different tags and describes their usage.</p>\n<pre><code class=\"language-convo\">&gt; assistant\nAsk me a question\n\n// @concat appends the content of the follow \n// message to the previous\n@concat\n&gt; assistant\nAny question, I dare ya.\n\n// @suggestion display a message as a\n// clickable suggestion\n@suggestion\n&gt; assistant\nWhat is your favorite ice cream\n\n@suggestion\n&gt; assistant\nhow much wood can a woodchuck chuck\n\n// @json instructs the LLM to response with JSON\n@json\n&gt; user\nHow many planets are there in the solar system\n\n// @format indicates the response format \n// of the message\n@format json\n&gt; assistant\n{\n    &quot;number_of_planets&quot;: 8,\n    &quot;planets&quot;: [\n        &quot;Mercury&quot;,\n        &quot;Venus&quot;,\n        &quot;Earth&quot;,\n        &quot;Mars&quot;,\n        &quot;Jupiter&quot;,\n        &quot;Saturn&quot;,\n        &quot;Uranus&quot;,\n        &quot;Neptune&quot;\n    ]\n}\n</code></pre>\n<h3>System Tags</h3>\n<p>Below is a full list of system tags Convo-Lang uses.</p>\n<p><code>@disableAutoComplete</code> - When applied to a function the return value of the function will not be\nused to generate a new assistant message.</p>\n<p><code>@edge</code>  Used to indicate that a message should be evaluated at the edge of a conversation with\nthe latest state. @edge is most commonly used with system message to ensure that all injected values\nare updated with the latest state of the conversation.</p>\n<p><code>@time</code> - Used to track the time messages are created.</p>\n<p><code>@tokenUsage</code> - Used to track the number of tokens a message used</p>\n<p><code>@model</code> - Used to track the model used to generate completions</p>\n<p><code>@responseModel</code> - Sets the requested model to complete a message with</p>\n<p><code>@endpoint</code> - Used to track the endpoint to generate completions</p>\n<p><code>@responseEndpoint</code> - Sets the requested endpoint to complete a message with</p>\n<p><code>@responseFormat</code> - Sets the format as message should be responded to with.</p>\n<p><code>@assign</code> - Causes the response of the tagged message to be assigned to a variable</p>\n<p><code>@json</code> - When used with a message the json tag is short and for <code>@responseFormat json</code></p>\n<p><code>@format</code> - The format of a message</p>\n<p><code>@assignTo</code> - Used to assign the content or jsonValue of a message to a variable</p>\n<p><code>@capability</code> - Used to enable capabilities. The capability tag can only be used on the first\nmessage of the conversation if used on any other message it is ignored. Multiple capability tags\ncan be applied to a message and multiple capabilities can be specified by separating them with a comma.</p>\n<p><code>@enableVision</code> - Shorthand for <code>@capability vision</code></p>\n<p><code>@task</code> - Sets the task a message is part of. By default messages are part of the &quot;default&quot; task</p>\n<p><code>@maxTaskMessageCount</code> - Sets the max number of non-system messages that should be included in a task completion</p>\n<p><code>@taskTrigger</code> - Defines what triggers a task</p>\n<p><code>@template</code> - Defines a message as a template</p>\n<p><code>@sourceTemplate</code> - used to track the name of templates used to generate messages</p>\n<p><code>@component</code> - Used to mark a message as a component. The value can be &quot;render&quot; or &quot;input&quot;. The default\nvalue is &quot;render&quot; if no value is given. When the &quot;input&quot; value is used the rendered component\nwill take input from a user then write the input received to the executing conversation.\n<a href=\"#components\">read more</a></p>\n<p><code>@renderOnly</code> - When applied to a message the message should be rendered but not sent to LLMs</p>\n<p><code>@condition</code> - When applied to a message the message is conditionally added to the flattened view of a\nconversation. When the condition is false the message will not be visible to the user or\nthe LLM. <a href=\"#conditional-messages\">read more</a></p>\n<p><code>@renderTarget</code> - Controls where a message is rendered. By default messages are rendered in the default chat\nview, but applications can define different render targets.</p>\n<p><code>@toolId</code> - Used in combination with function calls to mark to return value of a function and its call message</p>\n<p><code>@disableAutoScroll</code> - When applied to the last content or component messages auto scrolling will be disabled</p>\n<p><code>@markdown</code> - When applied to a message the content of the message will be parsed as markdown</p>\n<p><code>@sourceUrl</code> - A URL to the source of the message. Typically used with RAG.</p>\n<p><code>@sourceId</code> - The ID of the source content of the message. Typically used with RAG.</p>\n<p><code>@sourceName</code> - The name of the source content of the message. Typically used with RAG.</p>\n<p><code>@suggestion</code> - When applied to a message the message becomes a clickable suggestion that when clicked will\nadd a new user message with the content of the message. If the suggestion tag defines a value\nthat value will be displayed on the clickable button instead of the message content but the\nmessage content will still be used as the user messaged added to the conversation when clicked.\nSuggestion message are render only and not seen by LLMs.</p>\n<p><code>@suggestionTitle</code> - A title display above a group of suggestions</p>\n<p><code>@output</code> - Used to mark a function as a node output.</p>\n<p><code>@errorCallback</code> - Used to mark a function as an error callback</p>\n<p><code>@concat</code> - Causes a message to be concatenated with the previous message. Both the message the tag is\nattached to and the previous message must be content messages or the tag is ignored.\nWhen a message is concatenated to another message all other tags except the condition tag are ignored.</p>\n<p><code>@call</code> - Instructs the LLM to call the specified function. The values &quot;none&quot;, &quot;required&quot;, &quot;auto&quot; have a\nspecial meaning. If no name is given the special &quot;required&quot; value is used.</p>\n<ul>\n<li>none: tells the LLM to not call any functions</li>\n<li>required: tells the LLM it must call a function, any function.</li>\n<li>auto: tells the LLM it can call a function respond with a text response. This is the default behaviour.</li>\n</ul>\n<p><code>@eval</code> - Causes the message to be evaluated as code. The code should be contained in a markdown code block.</p>\n<p><code>@userId</code> - Id of the user that created the message</p>\n<p><code>@preSpace</code> - Causes all white space in a content message to be preserved. By define all content message\nwhitespace is preserved.</p>\n<p><code>@import</code> - Allows you to import external convo-lang scripts. <a href=\"#imports\">read more</a></p>\n<h2>Imports</h2>\n<p>Imports allow external Convo-Lang sources to be imported into the current conversation. Imports can\nbe used to import libraries of functions, agent personas, knowledge sources, etc.</p>\n<p>Imports are defined using the <code>@import</code> tag followed by the name or location of the source to import\nand optional modifiers.</p>\n<p>Import sources can be http endpoints or custom named sources that are retired using application\nregistered import handlers. Import handlers allow application to use any type of logic to handle\nloading import sources.</p>\n<p>The following example includes 3 snippets of Convo-Lang. The first to are import sources and the\nlast is the conversation importing the first 2.</p>\n<p><em>@@static</em>\n<em>@@convo-source weather-agent</em></p>\n<pre><code class=\"language-convo\">// source name = weather-agent\n&gt; system\nYou are a friendly weather forecaster.\nAlways base your answers off of the weather\n\n# Gets the current weather conditions for the given\n# location. Returned values use the metric system.\n&gt; getWeather(\n    city:string\n    state:string\n) -&gt; (\n    weather=httpGet(\n        &quot;https://6tnpcnzjbtwa5z4qorusxrfaqu0sqqhs.lambda-url.us-east-1.on.aws/&quot;,\n        '{{city}} {{state}}'\n    )\n    return(weather)\n)\n</code></pre>\n<p><em>@@static</em>\n<em>@@convo-source beach-boy</em></p>\n<pre><code class=\"language-convo\">// source name = beach-boy\n&gt; system\nUse the follow bio about the user to help answer questions\n&lt;bio&gt;\nLocation: Miami, FL\nage: 25\nhobbies: Surfing, Roller Blading, Puzzles\n&lt;/bio&gt;\n</code></pre>\n<pre><code class=\"language-convo\">@import weather-agent\n@import beach-boy\n&gt; assistant\nDo you have any questions about todays weather\n\n&gt; user\nWhat should I do today?\n\n@toolId call_9Ep8tg03DigprvvDuWVXQ0xC\n&gt; call getWeather(\n    &quot;city&quot;: &quot;Miami&quot;,\n    &quot;state&quot;: &quot;FL&quot;\n)\n&gt; result\n__return={\n    &quot;data&quot;: {\n        &quot;time&quot;: &quot;2024-10-26T01:56:00Z&quot;,\n        &quot;values&quot;: {&quot;cloudBase&quot;: 0.52,&quot;cloudCeiling&quot;: 0.52,&quot;cloudCover&quot;: 100,&quot;dewPoint&quot;: 20.13,&quot;freezingRainIntensity&quot;: 0,&quot;humidity&quot;: 78,&quot;precipitationProbability&quot;: 0,&quot;pressureSurfaceLevel&quot;: 1019.95,&quot;rainIntensity&quot;: 0,&quot;sleetIntensity&quot;: 0,&quot;snowIntensity&quot;: 0,&quot;temperature&quot;: 24.13,&quot;temperatureApparent&quot;: 24.13,&quot;uvHealthConcern&quot;: 0,&quot;uvIndex&quot;: 0,&quot;visibility&quot;: 16,&quot;weatherCode&quot;: 1001,&quot;windDirection&quot;: 65.88,&quot;windGust&quot;: 7.31,&quot;windSpeed&quot;: 3.5}\n    }\n}\n\n\n&gt; assistant\nThe weather in Miami today is mostly cloudy with a temperature of about 24°C (75°F). There is no chance of rain and mild winds at a speed of 3.5 m/s.\n\nGiven the conditions, here are some activities you might enjoy today:\n\n1. **Surfing**: Since there is no rain and the wind is not too strong, it could be a great day to hit the waves.\n\n2. **Roller Blading**: With a nice temperature and cloudy skies, it's also a good opportunity for roller blading along Miami's scenic paths.\n\n3. **Puzzles at Home**: If you prefer staying indoors, maybe a relaxing day of puzzles would be a perfect way to enjoy the clouds without worrying about rain.\n\nEnjoy your day!\n</code></pre>\n<h2>RAG</h2>\n<p>Retrieval augmented generation or RAG is a key part of any serious AI application, but it can be complicated to implement correctly. Convo-Lang provides an easy to use interface to connect a conversation to any RAG source.</p>\n<p><strong>How does RAG work in Convo-Lang</strong></p>\n<ol>\n<li>A user sends a message</li>\n<li>A registered RAG callback function is called and is passed the message the user is sending</li>\n<li>The RAG callback then preforms the task of retrieving information related to the user's message</li>\n<li>The RAG callback returns the related information</li>\n<li>Convo-Lang then appends the related information to the user's message and optionally encloses the information in a prefix and suffix</li>\n</ol>\n<p>The following RAG example uses a very simple keyword matching algorithm. If the user's message\ncontains all of the keywords of one of the JSON items below that item will be used as RAG source.\n<em>@@rag-source</em></p>\n<pre><code class=\"language-json\">[\n    {\n        &quot;keywords&quot;:[&quot;fast&quot;,&quot;car&quot;],\n        &quot;id&quot;:1,\n        &quot;name&quot;:&quot;Faster than lighting&quot;,\n        &quot;text&quot;:&quot;The Tesla Model S Plaid is one of the fastest production vehicles ever made&quot;\n    },\n    {\n        &quot;keywords&quot;:[&quot;truck&quot;,&quot;reliable&quot;],\n        &quot;id&quot;:2,\n        &quot;name&quot;:&quot;Just won't die&quot;,\n        &quot;text&quot;:&quot;Toyota Tundras are known to last up to 1,000,000 miles&quot;\n    }\n]\n</code></pre>\n<pre><code class=\"language-convo\">&gt; define\n__rag=true\n\n// This message will be used as a prefix for\n// any injected RAG information\n&gt; ragPrefix\nUse the following related information as context\nfor your response\n&lt;related-information&gt;\n\n// This message will be used as a suffixed for\n// any injected RAG information\n&gt; ragSuffix\n&lt;/related-information&gt;\n\n&gt; user\nI'm looking for a fast car\n\n\n@sourceId 1\n@sourceName Faster than lighting\n&gt; rag\nThe Tesla Model S Plaid is one of the fastest\nproduction vehicles ever made\n\n&gt; assistant\nIf you're looking for a fast car, the Tesla Model S\nPlaid is definitely worth considering. It's one of\nthe fastest production vehicles ever made,\ndelivering exceptional speed and performance.\n</code></pre>\n<p>After the rag message and rag prefix and suffix are applied the user message it will look like the\nfollowing to the LLMs.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; user\nI'm looking for a fast car\n\nUse the following related information as context for your response\n&lt;related-information&gt;\nThe Tesla Model S Plaid is one of the fastest\nproduction vehicles ever made\n&lt;/related-information&gt;\n</code></pre>\n<h2>Vision</h2>\n<p>Vision capabilities are enabled in Convo-Lang using markdown style images. Markdown images are\nconverted into the native format of LLM at runtime.</p>\n<p><em>@@tall</em></p>\n<pre><code class=\"language-convo\">&gt; user\nWhat percent of the green energy mix come\nfrom Biomass in this image\n![image](https://app.convo-lang.ai/example/green-energy.png)\n</code></pre>\n<h2>JSON Mode</h2>\n<p>It is often very useful for for you to have an LLM return responses as properly formatted JSON.\nJSON mode is enabled using the <code>@json</code>.</p>\n<pre><code class=\"language-convo\">@json\n&gt; user\nWhat is the population and land area of the 2\nlargest states in America by GDP?\n\n@format json\n&gt; assistant\n{\n    &quot;California&quot;: {\n        &quot;population&quot;: 39538223,\n        &quot;land_area&quot;: 163696,\n        &quot;units&quot;: &quot;square_miles&quot;\n    },\n    &quot;Texas&quot;: {\n        &quot;population&quot;: 29145505,\n        &quot;land_area&quot;: 268596,\n        &quot;units&quot;: &quot;square_miles&quot;\n    }\n}\n</code></pre>\n<p>Here we can see the LLM returned a JSON object with California and Texas and included a <code>@format</code> tag\nwith a value of json, indicating properly formatted JSON was returned.</p>\n<p>You can also provide the name of a data structure as the value of a <code>@json</code> tag. When provided the\nreturned JSON will conform to the given structure.</p>\n<pre><code class=\"language-convo\">&gt; define\nPlanet = struct(\n    name:string\n    diameterInMiles:number\n    distanceFromSun:number\n    numberOfMoons:number\n)\n\n@json Planet\n&gt; user\nWhat is the biggest planet in our solar system\n\n\n\n@format json\n&gt; assistant\n{\n    &quot;name&quot;: &quot;Jupiter&quot;,\n    &quot;diameterInMiles&quot;: 86881,\n    &quot;distanceFromSun&quot;: 484000000,\n    &quot;numberOfMoons&quot;: 79\n}\n</code></pre>\n<h2>Stats Tracking</h2>\n<p>Using <code>__trackTime</code>, <code>__trackTokenUsage</code>, and <code>__trackModel</code> you can enable in-conversation stats\nthat are written to the conversation as tags</p>\n<pre><code class=\"language-convo\">&gt; define\n__trackTime=true\n__trackTokenUsage=true\n__trackModel=true\n\n&gt; user\nWrite a short poem about tree frogs eating fly when\nall they want is some cheesecake.\n\n\n@time 2024-10-26T00:43:09-04:00\n@tokenUsage 24 / 188 / $0.00294\n@model gpt-4o\n&gt; assistant\nIn the moonlit grove where the shadows dance,  \nTree frogs gather with a hopeful glance.  \nTheir eyes on the flies that circle the night,  \nYet dreams of cheesecake fill their hearts with light.  \n\nTiny tongues flick with a whispering snap,  \nCatching their prey in a rhythmic trap.  \nYet in their minds, visions sweetly take shape,  \nOf creamy delights beneath fruit's draped cape.  \n\n“Alas,” they sigh, “we must feast on the fly,  \nWhen caramel swirls could lift us so high.”  \nBut hope lingers still, like the dewdrop’s gleam,  \nFor one day, perhaps, they’ll taste that dream.  \n\nSo with the night, they’ll sing their sweet song,  \nWishing for cheesecake as the stars hum along.  \nIn the heart of the forest, under celestial streak,  \nTree frogs dream of flavors they long to seek.\n</code></pre>\n<h2>Advanced Messaging</h2>\n<p>You can use the following advanced messaging techniques to create highly dynamic messages that\nallow a conversation to be transformed based on the state of the conversation.</p>\n<h3>Conditional Messages</h3>\n<p>Conditional messages use the <code>@condition</code> tag to conditionally remove them from a conversation based on the value of a variable. Conditional messages allow you to alter a conversation based on the current state of the conversation.</p>\n<pre><code class=\"language-convo\">&gt; define\ncharacterType='goodGuy'\n\n@edge\n@condition characterType goodGuy\n&gt; system\nYou are the hero in a super hero movie. Always be\npositive and try to help the user.\nResponse with a single sentence\n\n@edge\n@condition characterType badGuy\n&gt; system\nYou are the villain in a super hero movie.\nAlway be negative and bully the user.\nRespond with a single sentence and always start\nthe sentence with &quot;Heheh...,&quot;\n\n\n&gt; user\nMy kitten is stuck in a tree\n\n// The assistant responds as a good guy because\n// characterType equals 'goodGuy'\n&gt; assistant\nHang tight, I'll use my superpowers to rescue your\nkitten from the tree safely!\n\n\n\n&gt; user\nChange to the bad guy\n\n@toolId call_PzFYNKPIiNSG8cXysrZSS0xJ\n&gt; call changeCharacterType(\n    &quot;type&quot;: &quot;badGuy&quot;\n)\n&gt; result\ncharacterType=&quot;badGuy&quot;\n__return=&quot;badGuy&quot;\n\n\n&gt; assistant\nEven as a bad guy, I can't resist the urge to help\nyou out with your kitten!\n\n\n&gt; user\nI can't hold on to my ballon because I'm a\nlittle kid, helpp!!!\n\n// The assistant responds as a bad guy because\n// characterType equals 'badGuy'\n&gt; assistant\nHeheh..., well, I suppose I could let it float away...\nbut where's the fun in that? I'll snag it back for\nyou this time. Catch!  🎈\n</code></pre>\n<h3>Edge Messages</h3>\n<p>An edge message is a message that is evaluated at the end or &quot;edge&quot; of a conversation. Typically\nvariable assignment and other state changes have no effect the messages that follow them, but\nthis is not the case with edge messages. Edge messages are evaluated after all variable assignment\nand state changes are complete regardless of the where the message is defined in a conversation.\nThe <code>@edge</code> tag is used to mark messages as edge messages.</p>\n<pre><code class=\"language-convo\">&gt; define\nbankBalance=100\n\n// This message will always show the starting balance\n// of $100 regardless of any following assignments\n// to bankBalance \n&gt; assistant\nYour starting bank balance is ${{bankBalance}}\n\n// This message will alway show to the last value\n// assigned to bankBalance since it is an edge message\n@edge\n&gt; assistant\nYour current bank balance is ${{bankBalance}}\n\n# After making a deposit respond by only\n# saying &quot;Deposit complete&quot;\n&gt; depositMoney(\n    amount:number\n) -&gt; (\n    bankBalance = add(bankBalance amount)\n)\n\n&gt; user\nDeposit 500 smackeroonies\n\n@toolId call_Gqc7oXcXD2nFjKIDnLe6gaNz\n&gt; call depositMoney(\n    &quot;amount&quot;: 500\n)\n&gt; result\nbankBalance=600\n__return=600\n\n\n&gt; assistant\nDeposit complete\n</code></pre>\n<h3>Message Concatenation</h3>\n<p>Messages can be concatenated or joined together using the <code>@concat</code> tag. The concat tag is often\nused with conditional messages to make larger messages containing conditionally rendered sections.</p>\n<p>Try changing the name variable to &quot;Matt&quot; to see what happens.</p>\n<pre><code class=\"language-convo\">&gt; define\nname=&quot;Bob&quot;\n&gt; assistant\nHi, how are you today?\n\n@concat\n@condition name Matt\n&gt; assistant\nMy name is Matt and I like watching paint dry 😐\n\n@concat\n@condition name Bob\n&gt; assistant\nMy name is Bob and I like long walks do the isles\nof my local Home Depot 👷🏼‍♂️\n\n</code></pre>\n<h2>Executable Statements</h2>\n<p>Statements in Convo-Lang refers to the executable code that is evaluated by the Conversation engine\nat runtime. Statements can be contained in function bodies, top level statement message and\nin dynamic expression embedded in content messages.</p>\n<pre><code class=\"language-convo\">// all content in the define message are statements\n&gt; define\nname=&quot;Jeff&quot;\nageInDays=mul(38 365)\n\n// The changeName function body contains 2 statements\n&gt; changeName(newName:string) -&gt; (\n    name=newName\n    print('name set to {{newName}}')\n)\n\n// The assistant message contains 2 dynamic\n// expressions containing statements\n@edge\n&gt; assistant\nHi, I'm {{name}} I'm {{div(ageInDays 365)}} years old\n\n</code></pre>\n<h3>Keywords</h3>\n<p><code>string</code> - String type identifier</p>\n<p><code>number</code> - Number type identifier</p>\n<p><code>int</code> - Integer type identifier</p>\n<p><code>time</code> - Time type identifier. The time type is represented as an integer timestamp</p>\n<p><code>void</code> - Void type identifier.</p>\n<p><code>boolean</code> - Boolean type identifier.</p>\n<p><code>any</code> - Any time identifier</p>\n<p><code>true</code> - True constant</p>\n<p><code>false</code> - False constant</p>\n<p><code>null</code> - Null constant</p>\n<p><code>undefined</code> - Undefined constant</p>\n<p><code>enum</code> - Defines an enum</p>\n<p><code>array</code> -  Array type identifier</p>\n<p><code>object</code> - Map object type identifier</p>\n<p><code>struct</code> - Used to define custom data structures</p>\n<p><code>if</code> - Defines an if statement</p>\n<p><code>else</code> - Defines an else statement</p>\n<p><code>elif</code> - Defines an else if statement</p>\n<p><code>while</code> - defines a while loop</p>\n<p><code>break</code> - breaks out of loops and switches</p>\n<p><code>for</code> - Defines a for loop</p>\n<p><code>foreach</code> - Defines a for each loop</p>\n<p><code>in</code> - create an iterator to be used by the foreach statement</p>\n<p><code>do</code> - Defines a do block. Do blocks allow you to group multiple statements together</p>\n<p><code>then</code> - Defines a then block used with if statements</p>\n<p><code>return</code> - returns a value from a function</p>\n<p><code>switch</code> -  defines a switch statement</p>\n<p><code>case</code> - defines a case in a switch statement</p>\n<p><code>default</code> - defines the default case of a switch statement</p>\n<p><code>test</code> - Used in a switch statement to test for a dynamic case value.</p>\n<h3>Strings</h3>\n<p>There are 3 types of string in convo.</p>\n<h4>( &quot; ) Double Quote</h4>\n<p>Double quote strings are the simplest strings in convo, they start and end with a double\nquote character. To include a double quote character in a double quote string escape it with a\nback slash. Double quote strings can span multiple lines.</p>\n<pre><code class=\"language-convo\">&gt; define\nvar1=&quot;Double quote string&quot;\nvar2=&quot;Double quote string with a (\\&quot;) double quote character&quot;\nvar3=&quot;String with a newline\nin it&quot;\n\n&gt; assistant\nvar1: {{var1}}\n\nvar2: {{var2}}\n\nvar3: {{var3}}\n</code></pre>\n<h4>( ' ) Single Quote</h4>\n<p>Single quote strings are similar to double quotes but also support embedded statements. Embedded\nstatements are surrounded with double curly bracket pairs and contain any valid convo statement</p>\n<pre><code class=\"language-convo\">&gt; define\nname=&quot;Ricky Bobby&quot;\nvar0='I need to tell you something {{name}}... You can walk.'\n\nvar1='Single quote string'\nvar2='Single quote string with a (\\') single quote character'\nvar3='String with a newline\nin it'\n\n&gt; assistant\nvar1: {{var1}}\n\nvar2: {{var2}}\n\nvar3: {{var3}}\n</code></pre>\n<h4>Heredoc</h4>\n<p>Heredoc strings begin and end with 3 dashes and the contents of the string are highlighted with the\nconvo-lang syntax highlighter. They are useful when defining strings with conversation\nmessages in them.</p>\n<pre><code class=\"language-convo\">&gt; define\nvar1=---\nHere is a heredoc string with an conversation in it\n\n&gt; user\nTell me a joke about airplanes\n\n&gt; assistant\nWhy don't airlines ever play hide and seek?\n\nBecause good luck hiding a plane!\n---\n\n&gt; assistant\nvar1: {{var1}}\n</code></pre>\n<h3>Arrays</h3>\n<p>Arrays allow you to story multiple value in a single variable. Arrays can be created using the\narray function or using JSON style array, both result in the same data type.</p>\n<pre><code class=\"language-convo\">&gt; define\n// Create array using array function\nary1=array(1 2 3)\n\n// Create JSON style array\nary2=[4 5 6]\n\nCart=struct(\n    // here array is used to define an array type\n    items:array(string)\n)\n\ncart=new(Cart {\n    items:[&quot;drill&quot; &quot;bed&quot;]\n})\n\n&gt; assistant\nary1:\n{{ary1}}\n\nary2:\n{{ary2}}\n\ncart:\n{{cart}}\n</code></pre>\n<h3>Enums</h3>\n<p>Enums allow you to define a type that can only be a value from a pre-define collection of values.\nUsing enums with functions allows you to restrict an LLM to only passing the exact values\nyou want for an argument.</p>\n<pre><code class=\"language-convo\">&gt; define\n// This is a named enum\nShirtSize=enum(&quot;xs&quot; &quot;sm&quot; &quot;md&quot; &quot;lg&quot; &quot;xl&quot;)\n\n// The LLM will only call setShirtProperties with\n// one of the values defined by the ShirtSize enum\n&gt; setShirtProperties(\n    size:ShirtSize\n    \n    // You can also define enums inline with\n    // function arguments\n    color:enum(&quot;red&quot; &quot;green&quot; &quot;blue&quot;)\n)\n\n&gt; user\nI wear large shirt shirts and I love the color\ngreen\n\n\n@toolId call_pGfrCTSN4ozT2huwSBzkhTRp\n&gt; call setShirtProperties(\n    &quot;size&quot;: &quot;lg&quot;,\n    &quot;color&quot;: &quot;green&quot;\n)\n&gt; result\n__return={\n    &quot;size&quot;: &quot;lg&quot;,\n    &quot;color&quot;: &quot;green&quot;\n}\n\n&gt; assistant\nI've set your shirt size to large and the color to green. Enjoy your new shirt!\n\n&gt; user\n</code></pre>\n<h3>Structures</h3>\n<p>Structures allow you to define custom data types made up of a collection of typed properties.\nNamed structures must always start with a capital letter. The properties of a structure can\neither be optional or required. Optional properties use a question mark after their name and\nbefore the colon used to denote the properties type. Properties of a structure can be\ndocumented using documenting comments to help describe the structure to LLMs.</p>\n<p>New instances of a structure can be created using the <code>new</code> function. The new function takes\nthe structure type as its first argument and an object that conforms to the structure\nas its second argument.</p>\n<pre><code class=\"language-convo\">&gt; define\nCar=struct(\n    name:string\n    color:string\n    transmission:enum(&quot;manual&quot; &quot;automatic&quot;)\n    fuel:enum(&quot;gas&quot; &quot;diesel&quot; &quot;electric&quot; &quot;hybrid&quot;)\n    make:string\n    model:string\n    year:int\n    price:number\n    // notes is an optional property\n    notes?:string;\n    features:array(string)\n\n    // engine is an unnamed struct\n    engine:struct(\n        displacement:number\n        maxRpm:int\n        torque:number\n    )\n)\n\n&gt; buildCar(car:Car) -&gt; (\n    return('built')\n)\n\n&gt; user\nBuild me a car that could win the Indy 500\n\n\n&gt; assistant\nBuilding a car for the Indy 500 involves adhering to strict specifications set by the racing league. Below are some key characteristics that should be considered for an Indy 500 race car:\n\n1. **Engine:** A twin-turbocharged V6 engine with a displacement of 2.2 liters is typical.\n2. **Chassis:** The car must use a Dallara chassis, specifically designed for IndyCar racing.\n3. **Transmission:** A semi-automatic transmission with paddle shifters, typically 6-speed, is preferred.\n4. **Fuel:** High-performance racing fuel is used.\n5. **Aerodynamics:** Must have advanced aerodynamic features, including adjustable wings and underbody designs that maximize downforce and minimize drag.\n6. **Weight:** The car must meet specific weight standards, usually around 1,650 lbs (748 kg) including the driver.\n7. **Safety:** Advanced safety features including the halo device, crash structures, and energy-absorbing materials.\n\nBuilding a car with these specifications involves collaboration with specialized manufacturers and engineers, and is beyond the capabilities of standard systems. If you have specific features or areas you would like to focus on, please let me know!\n\n\n&gt; user\nbuild it\n\n@toolId call_3JjOVaqTDUVnbS30TNC3LKoX\n&gt; call buildCar(\n    &quot;car&quot;: {\n        &quot;name&quot;: &quot;Indy 500 Race Car&quot;,\n        &quot;color&quot;: &quot;Red&quot;,\n        &quot;transmission&quot;: &quot;automatic&quot;,\n        &quot;fuel&quot;: &quot;gas&quot;,\n        &quot;make&quot;: &quot;Dallara&quot;,\n        &quot;model&quot;: &quot;IndyCar&quot;,\n        &quot;year&quot;: 2023,\n        &quot;price&quot;: 3000000,\n        &quot;notes&quot;: &quot;Custom built for high-speed race performance and compliant with IndyCar regulations.&quot;,\n        &quot;features&quot;: [\n            &quot;aerodynamic winglets&quot;,\n            &quot;halo safety device&quot;,\n            &quot;carbon fiber body&quot;,\n            &quot;adjustable suspension&quot;,\n            &quot;high-performance brakes&quot;\n        ],\n        &quot;engine&quot;: {\n            &quot;displacement&quot;: 2.2,\n            &quot;maxRpm&quot;: 12000,\n            &quot;torque&quot;: 300\n        }\n    }\n)\n&gt; result\n__return=&quot;built&quot;\n\n\n&gt; assistant\nThe Indy 500 race car has been successfully built with the following specifications:\n\n- **Name:** Indy 500 Race Car\n- **Color:** Red\n- **Transmission:** Automatic\n- **Fuel:** Gas\n- **Make:** Dallara\n- **Model:** IndyCar\n- **Year:** 2023\n- **Price:** $3,000,000\n- **Notes:** Custom built for high-speed race performance and compliant with IndyCar regulations.\n- **Features:**\n  - Aerodynamic winglets\n  - Halo safety device\n  - Carbon fiber body\n  - Adjustable suspension\n  - High-performance brakes\n- **Engine:**\n  - Displacement: 2.2 liters\n  - Max RPM: 12,000\n  - Torque: 300\n\nThis car is designed to comply with the specifications and regulations necessary for competing in the Indy 500.\n\n</code></pre>\n<h2>System Functions</h2>\n<h3>Util Functions</h3>\n<h4>pipe( ...values: any )</h4>\n<p>Pipes the value of each argument received to the argument to its right.</p>\n<h4>print( ...values:any )</h4>\n<p>Prints all values to stdout</p>\n<h4>new( type:Struct )</h4>\n<p>Creates a new object with defaults based on the given type</p>\n<pre><code class=\"language-convo\">&gt; define\nPet=struct(\n    type:enum(&quot;dog&quot; &quot;cat&quot; &quot;bird&quot;)\n    name:string\n    age:int\n)\n\nbuddy=new(Pet {\n    type:&quot;dog&quot;\n    name:&quot;Buddy&quot;\n    age:18\n})\n\n&gt; assistant\nA good boy:\n{{buddy}}\n</code></pre>\n<h4>describeStruct( type:Struct value:any )</h4>\n<p>Returns the given value as a markdown formatted string</p>\n<h4>is( ...value:any type:any )</h4>\n<p>Checks if all of the parameters left of the last parameter are of the type of the last parameter</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\nnum = 7\n\n// true\nis(num number)\n\n// false\nis(num string)\n\nstr = &quot;lo&quot;\n\n// true\nis(str string)\n\n// false\nis(str number)\n\n// false\nis(str num number)\n\n// true\nis(str num any)\n\nPerson = struct(\n    name: string\n    age: number\n)\n\nuser1 = map(\n    name: &quot;Jeff&quot;\n    age: 22\n)\n\nuser2 = map(\n    name: &quot;Max&quot;\n    age: 12\n)\n\n// true\nis(user1 Person)\n\n// true\nis(user1 user2 Person)\n\n// false\nis(user1 user2 num Person)\n\n</code></pre>\n<h4>map( ...properties: any )</h4>\n<p>Creates an object</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; define\n// meObj has 2 properties, name and age\nmeObj = map(\n    name: &quot;Jeff&quot;\n    age: 22\n)\n\n// object can also be created using JSON syntax\nmeObj = {\n    name: &quot;Jeff&quot;\n    age: 22\n}\n</code></pre>\n<h4>jsonMap( ...properties: any )</h4>\n<p>Used internally to implement JSON object syntax support. At compile time JSON objects are converted\nto standard convo function calls.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\njsonStyle = {\n    &quot;go&quot;: &quot;fast&quot;,\n    &quot;turn&quot;: &quot;left&quot;,\n    &quot;times&quot; 1000\n}\n\nconvoStyle = obj1 = jsonMap(\n    go: &quot;fast&quot;\n    turn: &quot;left&quot;\n    times: 1000\n)\n</code></pre>\n<h4>jsonMap( ...properties: any )</h4>\n<p>Used internally to implement JSON array syntax support. At compile time JSON arrays are converted\nto standard convo function calls.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\njsonStyle = [ 1, 2, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n\nconvoStyle = array( 1 2 3 &quot;a&quot; &quot;b&quot; &quot;c&quot; )\n</code></pre>\n<h3>Math Operators</h3>\n<h4>add( ...values:any )</h4>\n<p>Adds all arguments together and returns the result. Strings are concatenated. (a + b )</p>\n<h4>sub( a:number b:number )</h4>\n<p>Subtracts a from b and returns the result.  (a - b )</p>\n<h4>sub( a:number b:number )</h4>\n<p>Multiplies a and b and returns the result.  (a * b )</p>\n<h4>div( a:number b:number )</h4>\n<p>Divides a and b and returns the result.  (a / b )</p>\n<h4>pow( a:number b:number )</h4>\n<p>Raises a by b and returns the result.  Math.pow(a, b )</p>\n<h4>inc( *a:number byValue?:number )</h4>\n<p>Increments the value of the given variable by 1 or the value of the second argument. ( a++ ) or ( a+= byValue )</p>\n<h4>dec( *a:number byValue?:number )</h4>\n<p>Decrements the value of the given variable by 1 or the value of the second argument. ( a-- ) or ( a-= byValue )</p>\n<h3>Logic Operators</h3>\n<h4>and( ...values: any )</h4>\n<p>Returns true if all given arguments are truthy.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\n// true\nand( 1 )\n\n// false\nand( 0 )\n\n// true\nand( 1 2 )\n\n// false\nand( 0 1 )\n\n// true\nand( eq(1 1) eq(2 2) )\n\n// false\nand( eq(1 1) eq(2 1) )\n\n\n</code></pre>\n<h4>or( ...values: any )</h4>\n<p>Returns the first truthy value or the last non truthy value if no truthy values are given. If no\nvalues are given undefined is returned.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt;do\n// 1\nor( 1 )\n\n// 0\nor( 0 )\n\n// 1\nor( 1 2 )\n\n// 2\nor( 0 2 )\n\n// true\nor( eq(1 1) eq(2 2) )\n\n// true\nor( eq(1 1) eq(2 1) )\n\n// false\nor( eq(1 3) eq(2 1) )\n\n</code></pre>\n<h4>not( ...values: any )</h4>\n<p>Returns true if all given arguments are falsy.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\n// false\nor( true )\n\n// true\nor( false )\n\n// false\nor( 1 )\n\n// true\nor( 0 )\n\n// false\nor( 1 2 )\n\n// false\nor( 0 1 )\n\n// true\nor( 0 false )\n\n// false\nor( eq(1 1))\n\n// true\nor( eq(1 2) )\n\n</code></pre>\n<h4>gt( a:number b:number)</h4>\n<p>Returns true if a is grater then b. ( a &gt; b )</p>\n<h4>gte( a:number b:number)</h4>\n<p>Returns true if a is grater then or equal to b. ( a &gt;= b )</p>\n<h4>lt( a:number b:number)</h4>\n<p>Returns true if a is less then b. ( a &lt; b )</p>\n<h4>lte( a:number b:number)</h4>\n<p>Returns true if a is less then or equal to b. ( a &lt;= b )</p>\n<h3>Control Flow</h3>\n<h4>if( condition:any ), elif( condition: any ), then( ...statements )</h4>\n<p>If condition is truthy then the statement directly after the if statement will be executed otherwise\nthe statement directly after if is skipped</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\nage = 36\n\nif( gte( age 21 ) ) then (\n    print( &quot;You can buy beer in the US&quot; )\n) elif (lt( age 16 )) then(\n    print( &quot;You're not even close&quot; )\n) else (\n    print( '{{sub(21 age)}} years until you can buy beer in the US' )\n)\n\n</code></pre>\n<h4>while( condition:any )</h4>\n<p>While condition is truthy then the statement directly after the while statement will be executed\notherwise the statement directly after if is skipped and the while loop will exit.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\nlap = 0\n\nwhile( lt( lap 500 ) ) do (\n    print(&quot;go fast&quot;)\n    print(&quot;turn left&quot;)\n\n    // increment by 1\n    inc(lap)\n)\n\n</code></pre>\n<h4>foreach( iterator:any )</h4>\n<p>Executes the next statement for each item returned by the passed in iterator.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\ntotal = 0\nforeach( num=in(array(1 2 3 4 )) ) do (\n    total = add( num total )\n)\n\n// 10\nprint(total)\n</code></pre>\n<h4>in( value: array(any) )</h4>\n<p>Iterates of the values of an array</p>\n<h4>break( ...values: any )</h4>\n<p>Breaks out of loops either not arguments are passed or if any of the passed arguments are truthy</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\nlap = 0\n\nwhile( true ) do (\n    print(&quot;go fast&quot;)\n    print(&quot;turn left&quot;)\n\n    // increment by 1\n    inc(lap)\n\n    if( eq( lap 500 ) ) then (\n        break()\n    )\n)\n</code></pre>\n<h4>do( ...statements: any)</h4>\n<p>Executes all given statements and returns the value of the last statement. Do is commonly used with\nloop statements, but it can also be useful in other situations on its own such as doing inline\ncalculations.\n(note) The do keyword is also used to define top level statement when do is used as a message name.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\nn = 0\nwhile( lt( n 10 ) ) do (\n    // increment by 1\n    inc(lap)\n)\n\n// 22\nprint( add( 5 do(\n    sum = mul(n 2)\n    sum = sub( sum 3 )\n)) )\n\n</code></pre>\n<h4>switch( value:any ...valueOrCase:any ), case( value:any ), test( condition:any ), default()</h4>\n<p>Switch can be used as either and switch statement or a ternary. When the switch function has exactly\n3 arguments and non of the is a case or default statement then switch acts as a ternary.</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">&gt; do\n// can be 0 to 9\nvalue = rand(9)\n\n// can be 20 to 29\nvalue2 = add(20 rand(9))\n\n\nswitch(\n\n    // Sets the current match value of the switch. The match value of a switch statement can be\n    // changed further down the switch\n    value\n\n    case(0) print(&quot;Lowest&quot;)\n\n    case(1) do(\n        print(&quot;Value is 1&quot;)\n    )\n\n    case(2) do(\n        print(&quot;Number two&quot;)\n    )\n\n    case(3) do(\n        print(&quot;Tree or three&quot;)\n    )\n\n    // change the value to a value in ary\n    value2\n\n    case(20) do(\n        print(&quot;2 zero&quot;)\n    )\n\n    test(lt(value2 28)) do(\n        print(&quot;less than 28&quot;)\n    )\n\n    default() print(&quot;Fall back to default&quot;)\n\n)\n\n\n// values matched by switches are returned and the value can be assigned to a variable\nstr = &quot;two&quot;\nvalue = switch(\n    str\n\n    case(&quot;one&quot;) 1\n    case(&quot;two&quot;) 2\n    case(&quot;three&quot;) 3\n)\n\n// 2\nprint(value)\n\n\n// switches can also be used as a ternary\n\n// yes\nprint( switch(true &quot;yes&quot; &quot;no&quot;) )\n\n// no\nprint( switch(false &quot;yes&quot; &quot;no&quot;) )\n</code></pre>\n<h4>return( value:any )</h4>\n<p>Returns a value from the current function</p>\n<p><em>@@static</em></p>\n<pre><code class=\"language-convo\">\n&gt; customMath(\n    a: number\n    b: number\n) -&gt; (\n    return mul( add(a b) b )\n)\n\n&gt; do\n\nvalue = customMath(a:4 b:3)\n\n// 21\nprint(value)\n\n</code></pre>\n<h2>Library Functions</h2>\n<p>Convo-Lang defines a standard set of libraries for common coding needs.</p>\n<h3>now()</h3>\n<p>Returns the current date time as a timestamp. now uses Date.now() to get the current timestamp.</p>\n<h3>dateTime( format?:string date?:string|number|Date )</h3>\n<p>Returns the current or given date as a formatted string. The default value format string is\n&quot;yyyy-MM-dd'T'HH:mm:ssxxx&quot; which is an ISO 8601 date and results in formatted dates that look\nlike 2023-12-08T21:05:08-01:00. Invalid date formats will fallback to using the default date format.\nFormatting is done using date-fns - https://date-fns.org/v2.16.1/docs/format</p>\n<h3>sleep( milliseconds:number )</h3>\n<p>Suspends execution for the given number of milliseconds</p>\n<h3>rand( max?:int )</h3>\n<p>Returns a random number. Is the max parameters is passed then a random whole number with a\nmaximum of max will be returned otherwise a random number from 0 to 1 will be returned.</p>\n<h3>httpGet( url:string )</h3>\n<p>Performs an http GET request and returns the parsed JSON result. Results with a 404 status or a\nContent-Type not equal to application/json are returned as undefined.</p>\n<h3>httpGetString( url: string )</h3>\n<p>Performs an http GET request and returns the result as a string.</p>\n<h3>httpPost( url:string body:any )</h3>\n<p>Performs an http POST request and returns the parsed JSON result. Results with a 404 status or a\nContent-Type not equal to application/json are returned as undefined.</p>\n<h3>httpPatch( url:string body:any )</h3>\n<p>Performs an http PATCH request and returns the parsed JSON result. Results with a 404 status or a\nContent-Type not equal to application/json are returned as undefined.</p>\n<h3>httpPut( url:string body:any )</h3>\n<p>Performs an http PUT request and returns the parsed JSON result. Results with a 404 status or a\nContent-Type not equal to application/json are returned as undefined.</p>\n<h3>httpDelete( url:string )</h3>\n<p>Performs an http DELETE request and returns the parsed JSON result. Results with a 404 status or a\nContent-Type not equal to application/json are returned as undefined.</p>\n<h3>encodeURI( value:string )</h3>\n<p>Returns the value encoded as an URI</p>\n<h3>encodeURIComponent( value:string )</h3>\n<p>Returns the value encoded as an URI component</p>\n<h3>md( ...values:any[] )</h3>\n<p>Concatenates all passed in values and formats the values as markdown. Recursive objects are limited\nto a depth of 5.</p>\n<h3>toMarkdown( maxDepth:int value:any)</h3>\n<p>formats the value as markdown and allows the configuration of recursive object depth.</p>\n<h3>toJson( value:any )</h3>\n<p>Formats the given value as json</p>\n<h3>toJsonMdBlock( value:any )</h3>\n<p>Formats the given value as json and closes the value in a markdown json code block.</p>\n<h3>toJsonScheme( type:struct )</h3>\n<p>Prints a struct as a JSON scheme.</p>\n<h3>toCsv( value:any[] )</h3>\n<p>Prints an array of values a as CSV.</p>\n<h3>toCsvMdBlock</h3>\n<p>Prints an array of values a as CSV inside of a markdown code block.</p>\n<h3>merge( ...values:any[] )</h3>\n<p>Merges all passed in parameters into a single object. merge is similar to Javascript's spread operator.</p>\n<h3>html( ...values:any[] )</h3>\n<p>Returns a string will all given values as escaped html. values are separated by a newline</p>\n<h3>xAtt( value:any )</h3>\n<p>Returns the value as an attribute to be used with XML.</p>\n<h3>openBrowserWindow( url:string target:string='_blank' )</h3>\n<p>Opens a new browser window</p>\n<pre><code class=\"language-convo\">&gt; assistant\n&lt;Component propName={{xAtt({prop1:'hello',prop2:77})}}&gt;\n</code></pre>\n<h2>Convo-graph - beta</h2>\n<p>Convo-graph is an advanced workflow system that defines workflows in the Convo-Lang syntax.\nConvo-graphs are often combined with custom UI renders to create interactive AI powered workflows.</p>\n<p>Controls:</p>\n<ul>\n<li>right click - Add node</li>\n<li>right click + shift - Add edge</li>\n<li>right click + cmd/ctrl - Add source</li>\n<li>right click + alt/option - Add input</li>\n<li>cmd/ctrl + scroll - zoom in/out</li>\n<li>middle click and drag - pan</li>\n</ul>\n<p>Click the <code>run</code> button in the bottom left of any input node to trigger graph traversal.</p>\n<p><em>@@convo-graph</em></p>\n<pre><code class=\"language-convo\">@x 83\n@y 64\n@id i0\n@key orderInput\n@name Order Input\n&gt; input\nHello I would like to order a large\ncheese pizza with and a bottle of\nCoke. \n\n&gt; edge i0( x: 708 y: 114 id: &quot;e1&quot; ) -&gt;  n0()\n\n\n@x 88\n@y 468\n@id i1\n@key customSupportInput\n@name Custom Support Input\n&gt; input\nMy pizza was suppoed to be delivered\nan hour ago. I want a refund and\na free pizza\n\n&gt; edge i1( x: 697 y: 493 id: &quot;e3&quot; ) -&gt;  n0()\n\n\n&gt; node router( x: 1228 y: 172 id: &quot;n0&quot; name: &quot;Router&quot; )\n\n    &gt; step ( )\n\n        &gt; categorize(\n            messageType:enum(&quot;order&quot; &quot;customer-support&quot; &quot;other&quot;)\n        ) -&gt; (\n            workflow.message=input\n            return( messageType)\n        )\n        \n        @call\n        &gt; user\n        Categorize the following input:\n        \n        {{input}}\n\n\n\n&gt; edge n0( x: 2135 y: 180 id: &quot;e2&quot; ) -&gt;  n1 (\n    eq(input &quot;order&quot;)\n)\n\n&gt; node order( x: 2702 y: 96 id: &quot;n1&quot; name: &quot;Order Pizza&quot; )\n\n    &gt; step ( )\n\n        &gt; orderPizza(\n            size:enum(&quot;sm&quot; &quot;md&quot; &quot;lg&quot;)\n            toppings:array(string)\n        )\n        \n        @call\n        &gt; user\n        Order a pizza based on the following:\n        \n        {{workflow.message}}\n\n\n\n&gt; edge n0( x: 2090 y: 557 id: &quot;e0&quot; ) -&gt;  n2 (\n    eq(input &quot;customer-support&quot;)\n)\n\n&gt; node support( x: 2698 y: 820 id: &quot;n2&quot; name: &quot;Submit Ticket&quot; )\n\n    &gt; step ( )\n\n        &gt; submitSupportTicket(\n            issue:string\n            requestedSolution?:string\n        )\n        \n        @call\n        &gt; user\n        Submit a support ticket based on the following:\n        \n        {{workflow.message}}\n</code></pre>\n<h2>Example Agents</h2>\n<h3>Pizza Agent</h3>\n<p>Below is an example of creating an agent named Willy that will help a user order a pizza.</p>\n<pre><code class=\"language-convo\">// define is a top level statement and is being used to define \n&gt; define\nagentName=&quot;Willy&quot;\npizzaToppings=[]\npizzaSize=null\n\n// The system message instructs the agent how to behave and informs the agent about the\n// current state of the pizza being ordered.\n@edge\n&gt; system\nYour name is {{agentName}} and you're helping a user order a pizza. The pizza can have at most 5\ntoppings\n\nPizza Size: {{or(pizzaSize &quot;Not set&quot;)}}\nPizza Toppings:\n{{pizzaToppings}}\n\n&gt; addTopping(\n    topping:string\n) -&gt; (\n    pizzaToppings=aryAdd(pizzaToppings topping)\n)\n\n&gt; removeTopping(\n    topping:string\n) -&gt; (\n    pizzaToppings=aryRemove(pizzaToppings topping)\n)\n\n&gt; setSize(\n    # sm = Small\n    # md = Medium\n    # lg = Large\n    size:enum(&quot;sm&quot; &quot;md&quot; &quot;lg&quot;)\n) -&gt; (\n    pizzaSize=size\n)\n\n# Before placing the order the user must pick a size and add at least 1 topping\n&gt; placeOrder() -&gt; (\n    if( not(pizzaSize) ) return('Error: Pizza Size required')\n    if( not(pizzaToppings.length) ) return('Error: At least 1 topping required')\n\n    return('Order successful')\n)\n\n\n&gt; assistant\nHello, my name is {{agentName}}. How can I help you today\n\n@suggestion\n&gt; assistant\nlarge pepperoni pizza\n\n@suggestion\n&gt; assistant\nmedium pizza with anchovies and sausage\n\n@suggestion\n&gt; assistant\nlarge pizza with chicken and bacon\n\n&gt; user\nI want a pizza with bacon, onions and sausage\n\n</code></pre>\n<h3>Sandwich Assistant</h3>\n<pre><code class=\"language-convo\">&gt; define\n// We use a define top level statement to define the agents name\n&gt; define\nname=&quot;Ricky&quot;\n\n// The system message informs the LLM how to behave\n&gt; system\nYour name is {{name}} and you are taking an order for a sandwich. User can order from the following menu.\nThe user can not customize their order, this is not Burger King, they can't have it their way.\n\n&lt;menu&gt;\n- Ham Sandwich - $7.50\n- Turkey Sandwich - $7.50\n&lt;/menu&gt;\n\n// The order function below can be called by the LLM when a user ask to order a sandwitch\n// The (#) documenting comments tell the LLM how to use the function\n\n# Orders a sandwich for the user\n&gt; order(\n    # name of the sandwich to order\n    sandwich:string\n    price:number\n)\n\n// The assistant message greets the user\n&gt; assistant\nHello, I'm {{name}}. How can I take your order?\n\n// The next 2 messages use the @suggestion tag to display clickable suggessions to the user\n@suggestion\n&gt; assistant\nHam Sandwich\n\n@suggestion\n&gt; assistant\nTurkey Sandwich\n\n// The user message tells the LLM what they want to order\n&gt; user\nI'll take a Ham Sandwich please\n\n\n\n</code></pre>\n"
} as const;
